{"version":3,"sources":["./src/app/layout/display/display-automatic/display-automatic-routing.module.ts","./src/app/layout/display/display-automatic/display-automatic.component.ts","./src/app/layout/display/display-automatic/display-automatic.component.ts.pre-build-optimizer.js","./src/app/layout/display/display-automatic/display-automatic.component.html","./src/app/layout/display/display-automatic/display-automatic-routing.module.ts.pre-build-optimizer.js","./src/app/layout/display/display-automatic/display-automatic.module.ts","./src/app/layout/display/display-automatic/display-automatic.module.ts.pre-build-optimizer.js","./src/app/layout/display/display-automatic/display-automatic-list/display-automatic-list.component.ts","./src/app/layout/display/display-automatic/display-automatic-list/display-automatic-list.component.ts.pre-build-optimizer.js","./src/app/layout/display/display-automatic/display-automatic-list/display-automatic-list.component.html"],"names":["routes","path","component","alertService","envService","userSelectionService","this","userSelection","selectorVisibleFields","title","ngOnInit","setReportTitles","writeUserSelectionHistoric","assignation","auxiliar","DisplayAutomaticComponent","ɵfac","t","ɵcmp","type","rf","directives","styles","children","DisplayAutomaticRoutingModule","ɵmod","ɵinj","factory","forChild","DisplayAutomaticModule","provide","useValue","forRoot","displayAutomaticIndicatorsService","modalService","subscription","alertMessage","show_columns","show","selected","historic","graph","show_graph_or_table_button","env","model","local_store","currentDate","Date","format","rows","rows_original","getReportList","filterFieldList","fieldList","numberOfRowsInTable","id","value","exportName","initialSelectedFilterField","field_name","name","text","onRepeat","ngOnDestroy","unsubscribe","timerComponent","timerClock","add","subscribe","start_date","timerConnected","res","console","error","status","alertTitle","alertText","statusText","alertShow","alertClass","openDetailModal","content","activeModal","open","windowClass","keyboard","onShowHideGraphButtons","onActivate","event","row_selection","row","onSelect","onReturnHeaderResult","onRecalculate","onReturnNumberOfRowsInTable","onReturnRowsForTable","onObjectToArray","data","output","obj","undefined","Object","entries","map","key","onCreateModel","x","newModel","JSON","stringify","newModel2","replace","model3","eval","openModal","DisplayAutomaticListComponent"],"mappings":"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","file":"11.cd36d7f6c69d6862da23.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { DisplayAutomaticComponent } from \"./display-automatic.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: DisplayAutomaticComponent,\n    children: []\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DisplayAutomaticRoutingModule {}\n","import { Component, OnInit, EventEmitter, Output } from \"@angular/core\";\n\nimport { AlertModel } from \"shared/models/helpers/Alert\";\nimport {\n  AlertService,\n  EnvService,\n  UserSelectionService\n} from \"shared/services\";\nimport { UserSelectionModel } from \"shared/models\";\n\n@Component({\n  selector: \"app-display-display-automatic\",\n  templateUrl: \"./display-automatic.component.html\",\n  styleUrls: [\"./display-automatic.component.scss\"]\n})\nexport class DisplayAutomaticComponent implements OnInit {\n  userSelection: UserSelectionModel;\n  selectorVisibleFields: UserSelectionModel;\n  title;\n\n  constructor(\n    private alertService: AlertService,\n    private envService: EnvService,\n    private userSelectionService: UserSelectionService\n  ) {\n    this.userSelection =  new UserSelectionModel('standard');\n    this.selectorVisibleFields = new UserSelectionModel(\"visible\");\n    this.title = \"Display llamadas marcador automático\";\n  }\n\n  ngOnInit() {\n    if (this.userSelection.title !== this.title) {\n      this.setReportTitles();\n    }\n  }\n\n  setReportTitles() {\n    // this.userSelection = new UserSelectionModel(\"userSelection\");\n    this.userSelection.title = this.title;\n    // //\n    // //\n    this.userSelectionService.writeUserSelectionHistoric(this.userSelection);\n\n    this.selectorVisibleFields.assignation = false;\n    this.selectorVisibleFields.auxiliar = false;\n  }\n}\n","import { Component } from \"@angular/core\";\nimport { AlertService, EnvService, UserSelectionService } from \"shared/services\";\nimport { UserSelectionModel } from \"shared/models\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"shared/services\";\nimport * as i2 from \"./display-automatic-list/display-automatic-list.component\";\nvar DisplayAutomaticComponent = /** @class */ (function () {\n    function DisplayAutomaticComponent(alertService, envService, userSelectionService) {\n        this.alertService = alertService;\n        this.envService = envService;\n        this.userSelectionService = userSelectionService;\n        this.userSelection = new UserSelectionModel('standard');\n        this.selectorVisibleFields = new UserSelectionModel(\"visible\");\n        this.title = \"Display llamadas marcador automático\";\n    }\n    DisplayAutomaticComponent.prototype.ngOnInit = function () {\n        if (this.userSelection.title !== this.title) {\n            this.setReportTitles();\n        }\n    };\n    DisplayAutomaticComponent.prototype.setReportTitles = function () {\n        // this.userSelection = new UserSelectionModel(\"userSelection\");\n        this.userSelection.title = this.title;\n        // //\n        // //\n        this.userSelectionService.writeUserSelectionHistoric(this.userSelection);\n        this.selectorVisibleFields.assignation = false;\n        this.selectorVisibleFields.auxiliar = false;\n    };\n    DisplayAutomaticComponent.ɵfac = function DisplayAutomaticComponent_Factory(t) { return new (t || DisplayAutomaticComponent)(i0.ɵɵdirectiveInject(i1.AlertService), i0.ɵɵdirectiveInject(i1.EnvService), i0.ɵɵdirectiveInject(i1.UserSelectionService)); };\n    DisplayAutomaticComponent.ɵcmp = i0.ɵɵdefineComponent({ type: DisplayAutomaticComponent, selectors: [[\"app-display-display-automatic\"]], decls: 1, vars: 2, consts: [[3, \"userSelection\", \"selectorVisibleFields\"]], template: function DisplayAutomaticComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelement(0, \"app-display-display-automatic-list\", 0);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"userSelection\", ctx.userSelection)(\"selectorVisibleFields\", ctx.selectorVisibleFields);\n        } }, directives: [i2.DisplayAutomaticListComponent], styles: [\"\"] });\n    return DisplayAutomaticComponent;\n}());\nexport { DisplayAutomaticComponent };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayAutomaticComponent, [{\n        type: Component,\n        args: [{\n                selector: \"app-display-display-automatic\",\n                templateUrl: \"./display-automatic.component.html\",\n                styleUrls: [\"./display-automatic.component.scss\"]\n            }]\n    }], function () { return [{ type: i1.AlertService }, { type: i1.EnvService }, { type: i1.UserSelectionService }]; }, null); })();\n","<app-display-display-automatic-list [userSelection]=\"userSelection\"\n                                    [selectorVisibleFields]=\"selectorVisibleFields\">\n</app-display-display-automatic-list>","import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { DisplayAutomaticComponent } from \"./display-automatic.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nvar routes = [\n    {\n        path: \"\",\n        component: DisplayAutomaticComponent,\n        children: []\n    }\n];\nvar DisplayAutomaticRoutingModule = /** @class */ (function () {\n    function DisplayAutomaticRoutingModule() {\n    }\n    DisplayAutomaticRoutingModule.ɵmod = i0.ɵɵdefineNgModule({ type: DisplayAutomaticRoutingModule });\n    DisplayAutomaticRoutingModule.ɵinj = i0.ɵɵdefineInjector({ factory: function DisplayAutomaticRoutingModule_Factory(t) { return new (t || DisplayAutomaticRoutingModule)(); }, imports: [[RouterModule.forChild(routes)],\n            RouterModule] });\n    return DisplayAutomaticRoutingModule;\n}());\nexport { DisplayAutomaticRoutingModule };\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DisplayAutomaticRoutingModule, { imports: [i1.RouterModule], exports: [RouterModule] }); })();\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayAutomaticRoutingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [RouterModule.forChild(routes)],\n                exports: [RouterModule]\n            }]\n    }], null, null); })();\n","import { registerLocaleData } from \"@angular/common\";\nimport localeEs from \"@angular/common/locales/es\";\nregisterLocaleData(localeEs, \"es\");\nimport { LOCALE_ID } from \"@angular/core\";\n\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { AlertModule } from \"shared/modules/alert/alert.module\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport * as Chart from \"chart.js\";\nimport * as ChartDataLabels from \"chartjs-plugin-datalabels\";\nimport { ChartsModule as Ng2Charts } from \"ng2-charts\";\nimport { NgxDatatableModule } from \"@swimlane/ngx-datatable\";\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { NgSelectModule } from \"@ng-select/ng-select\";\n\nimport { SelectorModule } from \"shared/modules/selector/selector.module\";\n\nimport { DisplayHeaderModule } from \"sections/display/src/shared/modules/display-header/display-header.module\";\n\nimport { DisplayAutomaticRoutingModule } from './display-automatic-routing.module';\nimport { DisplayAutomaticComponent } from './display-automatic.component';\nimport { DisplayAutomaticListComponent } from './display-automatic-list/display-automatic-list.component';\n\n\n@NgModule({\n  declarations: [DisplayAutomaticComponent, DisplayAutomaticListComponent],\n  imports: [\n    CommonModule,\n\n    AlertModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbModule.forRoot(),\n    NgSelectModule,\n    NgxDatatableModule,\n    Ng2Charts,\n\n    SelectorModule,\n    DisplayHeaderModule,\n\n    DisplayAutomaticRoutingModule\n  ],\n  providers: [{ provide: LOCALE_ID, useValue: \"es\" }]\n})\nexport class DisplayAutomaticModule { }\n","import { registerLocaleData } from \"@angular/common\";\nimport localeEs from \"@angular/common/locales/es\";\nimport { LOCALE_ID } from \"@angular/core\";\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { AlertModule } from \"shared/modules/alert/alert.module\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { ChartsModule as Ng2Charts } from \"ng2-charts\";\nimport { NgxDatatableModule } from \"@swimlane/ngx-datatable\";\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { NgSelectModule } from \"@ng-select/ng-select\";\nimport { SelectorModule } from \"shared/modules/selector/selector.module\";\nimport { DisplayHeaderModule } from \"sections/display/src/shared/modules/display-header/display-header.module\";\nimport { DisplayAutomaticRoutingModule } from './display-automatic-routing.module';\nimport { DisplayAutomaticComponent } from './display-automatic.component';\nimport { DisplayAutomaticListComponent } from './display-automatic-list/display-automatic-list.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nregisterLocaleData(localeEs, \"es\");\nvar DisplayAutomaticModule = /** @class */ (function () {\n    function DisplayAutomaticModule() {\n    }\n    DisplayAutomaticModule.ɵmod = i0.ɵɵdefineNgModule({ type: DisplayAutomaticModule });\n    DisplayAutomaticModule.ɵinj = i0.ɵɵdefineInjector({ factory: function DisplayAutomaticModule_Factory(t) { return new (t || DisplayAutomaticModule)(); }, providers: [{ provide: LOCALE_ID, useValue: \"es\" }], imports: [[\n                CommonModule,\n                AlertModule,\n                FormsModule,\n                ReactiveFormsModule,\n                NgbModule.forRoot(),\n                NgSelectModule,\n                NgxDatatableModule,\n                Ng2Charts,\n                SelectorModule,\n                DisplayHeaderModule,\n                DisplayAutomaticRoutingModule\n            ]] });\n    return DisplayAutomaticModule;\n}());\nexport { DisplayAutomaticModule };\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DisplayAutomaticModule, { declarations: [DisplayAutomaticComponent, DisplayAutomaticListComponent], imports: [CommonModule,\n        AlertModule,\n        FormsModule,\n        ReactiveFormsModule, i1.NgbModule, NgSelectModule,\n        NgxDatatableModule,\n        Ng2Charts,\n        SelectorModule,\n        DisplayHeaderModule,\n        DisplayAutomaticRoutingModule] }); })();\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayAutomaticModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [DisplayAutomaticComponent, DisplayAutomaticListComponent],\n                imports: [\n                    CommonModule,\n                    AlertModule,\n                    FormsModule,\n                    ReactiveFormsModule,\n                    NgbModule.forRoot(),\n                    NgSelectModule,\n                    NgxDatatableModule,\n                    Ng2Charts,\n                    SelectorModule,\n                    DisplayHeaderModule,\n                    DisplayAutomaticRoutingModule\n                ],\n                providers: [{ provide: LOCALE_ID, useValue: \"es\" }]\n            }]\n    }], null, null); })();\n","// Angular\nimport { Component, OnInit, OnDestroy, Input, ViewChild } from \"@angular/core\";\n\n// Installed modules\nimport { Observable, Subscription, timer } from \"rxjs\";\nimport * as moment from \"moment\";\nimport {\n  NgbModal,\n  ModalDismissReasons,\n  NgbActiveModal,\n  NgbModalRef\n} from \"@ng-bootstrap/ng-bootstrap\";\n\n// Global shared functions import\nimport { getUpdateFilter } from \"shared/functions\";\nimport { objectDateToTextDate, textDateToObjectDate } from \"shared/functions\";\n\n// Global shared models\nimport { AlertModel } from \"shared/models/helpers/Alert\";\nimport { UserSelectionModel } from \"shared/models\";\n\n// Global shared services\nimport { AlertService, EnvService } from \"shared/services\";\nimport { UserSelectionService } from \"shared/services/\";\n\n// Local models\nimport {\n  DisplayAutomaticModel,\n  DisplayAutomaticResponseModel\n} from \"sections/display/src/shared/models/\";\n\n// Local shared\nimport { DisplayAutomaticIndicatorsService } from \"sections/display/src/shared/services/\";\n\n@Component({\n  selector: \"app-display-display-automatic-list\",\n  templateUrl: \"./display-automatic-list.component.html\",\n  styleUrls: [\"./display-automatic-list.component.scss\"]\n})\nexport class DisplayAutomaticListComponent implements OnInit, OnDestroy {\n  // Subscription\n  private subscription: Subscription = new Subscription();\n\n  // Variables that come from main component\n  @Input() userSelection: UserSelectionModel;\n  @Input() selectorVisibleFields: UserSelectionModel;\n\n  // Component variables\n  alertMessage = new AlertModel();\n  env;\n\n  // Selector variables\n  local_store;\n\n  // Realtime variables\n  timerConnected;\n  currentDate;\n\n  // Show variables\n  show_columns = false; // shows or hides a colum\n  show = false; // shows or hides the table\n  selected = [];\n  idealResponseTime;\n  historic = false;\n\n  // Filter variables\n  numberOfRowsInTable;\n  filterFieldList;\n  initialSelectedFilterField;\n  findInList;\n\n  // Variable to display values\n  model: DisplayAutomaticModel;\n  rows: DisplayAutomaticResponseModel;\n  rows_original: DisplayAutomaticResponseModel;\n  rows_total;\n  rows_detail;\n  rows_detail_original;\n  rows_detail_total;\n  row_selection;\n  exportName;\n\n  // Modal window variables\n  activeModal: NgbActiveModal;\n\n  // Graph variables\n  graph = false;\n  show_graph_or_table_button = false;\n\n  // Init\n  constructor(\n    private displayAutomaticIndicatorsService: DisplayAutomaticIndicatorsService,\n    private alertService: AlertService,\n    private envService: EnvService,\n    private modalService: NgbModal,\n    private userSelectionService: UserSelectionService\n  ) {\n    this.env = envService;\n    this.model = new DisplayAutomaticModel();\n    this.local_store = \"assignation\";\n    this.selectorVisibleFields = new UserSelectionModel(\"visible\");\n    this.selectorVisibleFields.assignation = false;\n    this.selectorVisibleFields.auxiliar = false;\n    this.currentDate = moment(new Date()).format(\"YYYY-MM-DD\");\n    this.rows = new DisplayAutomaticResponseModel();\n    this.rows_original = new DisplayAutomaticResponseModel();\n  }\n\n  // Start\n  ngOnInit() {\n    this.userSelection = new UserSelectionModel('standard');\n    this.getReportList(this.userSelection);\n    this.filterFieldList = this.model.fieldList();\n    this.numberOfRowsInTable = { id: 10, value: 10 };\n    this.exportName = \"reporte-conexión\";\n\n    this.initialSelectedFilterField = {\n      field_name: \"start_date\",\n      name: \"fecha_inicio\",\n      text: \"Fecha desde\"\n    };\n    this.onRepeat();\n  }\n\n  // Finish\n  ngOnDestroy() {\n    this.userSelectionService.writeUserSelectionHistoric(\n      this.userSelection,\n\n    );\n    this.subscription.unsubscribe();\n  }\n\n  onRepeat() {\n    // this.show_automatic = true;\n    // this.show_highlights = false;\n\n    const timerComponent = timer(1000, 5000);\n    const timerClock = timer(1000, 1000);\n\n    this.getReportList(this.userSelection);\n\n    this.subscription.add(\n      timerComponent.subscribe(() => {\n        if (\n          objectDateToTextDate(this.userSelection.start_date) ===\n          this.currentDate\n        ) {\n          // this.historic_mode = false;\n          // this.userSelection.historic_mode = false;\n          this.getReportList(this.userSelection);\n        } else {\n          // this.historic_mode = true;\n          // this.userSelection.historic_mode = true;\n        }\n      })\n    );\n    timerClock.subscribe(() => {\n      this.timerConnected = this.timerConnected + 1;\n    });\n  }\n\n  // Get records from backend\n  getReportList(userSelection: UserSelectionModel) {\n    if (userSelection) {\n      this.displayAutomaticIndicatorsService\n        .getReportList(userSelection)\n        .subscribe(\n          (res: DisplayAutomaticResponseModel) => {\n            // this.show = false;\n\n            this.timerConnected = 0;\n            // console.error(\"res\", res);\n\n            this.currentDate !== objectDateToTextDate(userSelection.start_date)\n              ? (this.historic = true)\n              : (this.historic = false);\n\n            if (res) {\n              // res.colors = res.colors[0];\n              this.rows = res;\n              // this.highligthts.onExtractVariables(this.rows);\n\n              // console.error(\"rows\", this.rows);\n\n              // this.childGraph\n              //   ? this.childGraph.generateGraph(\"service\", this.rows)\n              //   : \"\";\n            } else {\n              console.error(\"Error\", res);\n            }\n            this.alertMessage = new AlertModel();\n          },\n          error => {\n            console.error(\"Error\", error);\n            this.show = false;\n            this.alertService.error(error.status);\n            this.alertMessage.alertTitle = \"Error del servidor\";\n            this.alertMessage.alertText = error.statusText;\n            this.alertMessage.alertShow = true;\n            this.alertMessage.alertClass =\n              \"alert alert-danger alert-dismissible fade show\";\n          }\n        );\n    }\n  }\n\n  // Show modal detail window\n  openDetailModal(content, selected) {\n    this.activeModal = this.modalService.open(content, {\n      windowClass: \"my-class\",\n      keyboard: false\n    });\n  }\n\n  // Show or hide graph or table buttons\n  onShowHideGraphButtons() {\n    this.graph = !this.graph;\n    this.show_graph_or_table_button = !this.show_graph_or_table_button;\n  }\n  // Data table activate\n  onActivate(event) {\n    this.row_selection = event.row;\n    if (event.type === \"dblclick\") {\n    }\n  }\n  // Datatable select\n  onSelect(event) {\n    this.selected = event.selected;\n  }\n\n  // Update on return of selector in header\n  onReturnHeaderResult(event) {\n    this.userSelection = new UserSelectionModel('standard');\n    this.getReportList(this.userSelection);\n    this.show_graph_or_table_button = false;\n    // this.childGraph ? this.childGraph.generateGraph(\"header\", this.rows) : \"\";\n  }\n\n  // Activated by button\n  onRecalculate(event) {\n    this.userSelection = new UserSelectionModel('standard');\n    this.getReportList(this.userSelection);\n    this.show_graph_or_table_button = false;\n    console.error(\"this.rows\", this.rows);\n\n    // this.childGraph ? this.childGraph.generateGraph(\"button\", this.rows) : \"\";\n  }\n\n  // Response report finder to display number of rows in table\n  onReturnNumberOfRowsInTable(event) {\n    console.error(\"event\", event);\n    this.numberOfRowsInTable = event;\n  }\n\n  // Response report finder\n  onReturnRowsForTable(event) {\n    this.rows = event;\n  }\n\n  // Helper function to expose detail fields from a row\n  onObjectToArray(data) {\n    let obj = data[0];\n\n    let output;\n    if (obj !== undefined) {\n      output = Object.entries(obj).map(([key, value]) => ({\n        key,\n        value\n      }));\n    }\n    return output;\n  }\n\n  // temporary method to generate excel map for exporting model\n  onCreateModel(model?) {\n    model = new DisplayAutomaticModel().fieldList();\n\n    console.error(\"model\", model);\n\n    let obj = {};\n\n    model.map(x => {\n      obj[`${x.name}`] = \"x.\" + x.field_name;\n    });\n\n    let newModel = JSON.stringify(obj);\n    let newModel2 = JSON.stringify(\n      newModel\n        .replace(/\\\"/g, \"\")\n        .replace(/:/g, \": \")\n        .replace(/,/g, \",\\n \")\n    );\n    let model3 = eval(newModel2);\n\n    console.error(\"model\", model3);\n  }\n\n  //Test function for modal\n  openModal(content) {\n    // this.rows_detail = this.rows_detail_original.filter(x => {\n    //   return x.agent_id === this.row_selection.agent_id;\n    // });\n    // this.rows_detail_total = this.rows_original.filter(x => {\n    //   return x.agent_id === this.row_selection.agent_id;\n    // });\n    // this.activeModal = this.modalService.open(content, {\n    //   windowClass: \"my-class\",\n    //   keyboard: false\n    // });\n  }\n}\n","// Angular\nimport { Component, Input } from \"@angular/core\";\n// Installed modules\nimport { Subscription, timer } from \"rxjs\";\nimport * as moment from \"moment\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { objectDateToTextDate } from \"shared/functions\";\n// Global shared models\nimport { AlertModel } from \"shared/models/helpers/Alert\";\nimport { UserSelectionModel } from \"shared/models\";\n// Global shared services\nimport { AlertService, EnvService } from \"shared/services\";\nimport { UserSelectionService } from \"shared/services/\";\n// Local models\nimport { DisplayAutomaticModel, DisplayAutomaticResponseModel } from \"sections/display/src/shared/models/\";\n// Local shared\nimport { DisplayAutomaticIndicatorsService } from \"sections/display/src/shared/services/\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"sections/display/src/shared/services/\";\nimport * as i2 from \"shared/services\";\nimport * as i3 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i4 from \"shared/services/\";\nimport * as i5 from \"../../../../../../../../shared/modules/alert/alert.component\";\nimport * as i6 from \"../../../../../shared/modules/display-header/display-header.component\";\nvar DisplayAutomaticListComponent = /** @class */ (function () {\n    // Init\n    function DisplayAutomaticListComponent(displayAutomaticIndicatorsService, alertService, envService, modalService, userSelectionService) {\n        this.displayAutomaticIndicatorsService = displayAutomaticIndicatorsService;\n        this.alertService = alertService;\n        this.envService = envService;\n        this.modalService = modalService;\n        this.userSelectionService = userSelectionService;\n        // Subscription\n        this.subscription = new Subscription();\n        // Component variables\n        this.alertMessage = new AlertModel();\n        // Show variables\n        this.show_columns = false; // shows or hides a colum\n        this.show = false; // shows or hides the table\n        this.selected = [];\n        this.historic = false;\n        // Graph variables\n        this.graph = false;\n        this.show_graph_or_table_button = false;\n        this.env = envService;\n        this.model = new DisplayAutomaticModel();\n        this.local_store = \"assignation\";\n        this.selectorVisibleFields = new UserSelectionModel(\"visible\");\n        this.selectorVisibleFields.assignation = false;\n        this.selectorVisibleFields.auxiliar = false;\n        this.currentDate = moment(new Date()).format(\"YYYY-MM-DD\");\n        this.rows = new DisplayAutomaticResponseModel();\n        this.rows_original = new DisplayAutomaticResponseModel();\n    }\n    // Start\n    DisplayAutomaticListComponent.prototype.ngOnInit = function () {\n        this.userSelection = new UserSelectionModel('standard');\n        this.getReportList(this.userSelection);\n        this.filterFieldList = this.model.fieldList();\n        this.numberOfRowsInTable = { id: 10, value: 10 };\n        this.exportName = \"reporte-conexión\";\n        this.initialSelectedFilterField = {\n            field_name: \"start_date\",\n            name: \"fecha_inicio\",\n            text: \"Fecha desde\"\n        };\n        this.onRepeat();\n    };\n    // Finish\n    DisplayAutomaticListComponent.prototype.ngOnDestroy = function () {\n        this.userSelectionService.writeUserSelectionHistoric(this.userSelection);\n        this.subscription.unsubscribe();\n    };\n    DisplayAutomaticListComponent.prototype.onRepeat = function () {\n        // this.show_automatic = true;\n        // this.show_highlights = false;\n        var _this = this;\n        var timerComponent = timer(1000, 5000);\n        var timerClock = timer(1000, 1000);\n        this.getReportList(this.userSelection);\n        this.subscription.add(timerComponent.subscribe(function () {\n            if (objectDateToTextDate(_this.userSelection.start_date) ===\n                _this.currentDate) {\n                // this.historic_mode = false;\n                // this.userSelection.historic_mode = false;\n                _this.getReportList(_this.userSelection);\n            }\n            else {\n                // this.historic_mode = true;\n                // this.userSelection.historic_mode = true;\n            }\n        }));\n        timerClock.subscribe(function () {\n            _this.timerConnected = _this.timerConnected + 1;\n        });\n    };\n    // Get records from backend\n    DisplayAutomaticListComponent.prototype.getReportList = function (userSelection) {\n        var _this = this;\n        if (userSelection) {\n            this.displayAutomaticIndicatorsService\n                .getReportList(userSelection)\n                .subscribe(function (res) {\n                // this.show = false;\n                _this.timerConnected = 0;\n                // console.error(\"res\", res);\n                _this.currentDate !== objectDateToTextDate(userSelection.start_date)\n                    ? (_this.historic = true)\n                    : (_this.historic = false);\n                if (res) {\n                    // res.colors = res.colors[0];\n                    _this.rows = res;\n                    // this.highligthts.onExtractVariables(this.rows);\n                    // console.error(\"rows\", this.rows);\n                    // this.childGraph\n                    //   ? this.childGraph.generateGraph(\"service\", this.rows)\n                    //   : \"\";\n                }\n                else {\n                    console.error(\"Error\", res);\n                }\n                _this.alertMessage = new AlertModel();\n            }, function (error) {\n                console.error(\"Error\", error);\n                _this.show = false;\n                _this.alertService.error(error.status);\n                _this.alertMessage.alertTitle = \"Error del servidor\";\n                _this.alertMessage.alertText = error.statusText;\n                _this.alertMessage.alertShow = true;\n                _this.alertMessage.alertClass =\n                    \"alert alert-danger alert-dismissible fade show\";\n            });\n        }\n    };\n    // Show modal detail window\n    DisplayAutomaticListComponent.prototype.openDetailModal = function (content, selected) {\n        this.activeModal = this.modalService.open(content, {\n            windowClass: \"my-class\",\n            keyboard: false\n        });\n    };\n    // Show or hide graph or table buttons\n    DisplayAutomaticListComponent.prototype.onShowHideGraphButtons = function () {\n        this.graph = !this.graph;\n        this.show_graph_or_table_button = !this.show_graph_or_table_button;\n    };\n    // Data table activate\n    DisplayAutomaticListComponent.prototype.onActivate = function (event) {\n        this.row_selection = event.row;\n        if (event.type === \"dblclick\") {\n        }\n    };\n    // Datatable select\n    DisplayAutomaticListComponent.prototype.onSelect = function (event) {\n        this.selected = event.selected;\n    };\n    // Update on return of selector in header\n    DisplayAutomaticListComponent.prototype.onReturnHeaderResult = function (event) {\n        this.userSelection = new UserSelectionModel('standard');\n        this.getReportList(this.userSelection);\n        this.show_graph_or_table_button = false;\n        // this.childGraph ? this.childGraph.generateGraph(\"header\", this.rows) : \"\";\n    };\n    // Activated by button\n    DisplayAutomaticListComponent.prototype.onRecalculate = function (event) {\n        this.userSelection = new UserSelectionModel('standard');\n        this.getReportList(this.userSelection);\n        this.show_graph_or_table_button = false;\n        console.error(\"this.rows\", this.rows);\n        // this.childGraph ? this.childGraph.generateGraph(\"button\", this.rows) : \"\";\n    };\n    // Response report finder to display number of rows in table\n    DisplayAutomaticListComponent.prototype.onReturnNumberOfRowsInTable = function (event) {\n        console.error(\"event\", event);\n        this.numberOfRowsInTable = event;\n    };\n    // Response report finder\n    DisplayAutomaticListComponent.prototype.onReturnRowsForTable = function (event) {\n        this.rows = event;\n    };\n    // Helper function to expose detail fields from a row\n    DisplayAutomaticListComponent.prototype.onObjectToArray = function (data) {\n        var obj = data[0];\n        var output;\n        if (obj !== undefined) {\n            output = Object.entries(obj).map(function (_a) {\n                var key = _a[0], value = _a[1];\n                return ({\n                    key: key,\n                    value: value\n                });\n            });\n        }\n        return output;\n    };\n    // temporary method to generate excel map for exporting model\n    DisplayAutomaticListComponent.prototype.onCreateModel = function (model) {\n        model = new DisplayAutomaticModel().fieldList();\n        console.error(\"model\", model);\n        var obj = {};\n        model.map(function (x) {\n            obj[\"\" + x.name] = \"x.\" + x.field_name;\n        });\n        var newModel = JSON.stringify(obj);\n        var newModel2 = JSON.stringify(newModel\n            .replace(/\\\"/g, \"\")\n            .replace(/:/g, \": \")\n            .replace(/,/g, \",\\n \"));\n        var model3 = eval(newModel2);\n        console.error(\"model\", model3);\n    };\n    //Test function for modal\n    DisplayAutomaticListComponent.prototype.openModal = function (content) {\n        // this.rows_detail = this.rows_detail_original.filter(x => {\n        //   return x.agent_id === this.row_selection.agent_id;\n        // });\n        // this.rows_detail_total = this.rows_original.filter(x => {\n        //   return x.agent_id === this.row_selection.agent_id;\n        // });\n        // this.activeModal = this.modalService.open(content, {\n        //   windowClass: \"my-class\",\n        //   keyboard: false\n        // });\n    };\n    DisplayAutomaticListComponent.ɵfac = function DisplayAutomaticListComponent_Factory(t) { return new (t || DisplayAutomaticListComponent)(i0.ɵɵdirectiveInject(i1.DisplayAutomaticIndicatorsService), i0.ɵɵdirectiveInject(i2.AlertService), i0.ɵɵdirectiveInject(i2.EnvService), i0.ɵɵdirectiveInject(i3.NgbModal), i0.ɵɵdirectiveInject(i4.UserSelectionService)); };\n    DisplayAutomaticListComponent.ɵcmp = i0.ɵɵdefineComponent({ type: DisplayAutomaticListComponent, selectors: [[\"app-display-display-automatic-list\"]], inputs: { userSelection: \"userSelection\", selectorVisibleFields: \"selectorVisibleFields\" }, decls: 3, vars: 4, consts: [[3, \"alertMessage\"], [3, \"userSelection\", \"selectorVisibleFields\", \"timerConnected\", \"returnResult\"]], template: function DisplayAutomaticListComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\");\n            i0.ɵɵelement(1, \"app-alert\", 0);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"app-display-display-header\", 1);\n            i0.ɵɵlistener(\"returnResult\", function DisplayAutomaticListComponent_Template_app_display_display_header_returnResult_2_listener($event) { return ctx.onReturnHeaderResult($event); });\n            i0.ɵɵelementEnd();\n        } if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"alertMessage\", ctx.alertMessage);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"userSelection\", ctx.userSelection)(\"selectorVisibleFields\", ctx.selectorVisibleFields)(\"timerConnected\", ctx.timerConnected);\n        } }, directives: [i5.AlertComponent, i6.DisplayHeaderComponent], styles: [\"\"] });\n    return DisplayAutomaticListComponent;\n}());\nexport { DisplayAutomaticListComponent };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayAutomaticListComponent, [{\n        type: Component,\n        args: [{\n                selector: \"app-display-display-automatic-list\",\n                templateUrl: \"./display-automatic-list.component.html\",\n                styleUrls: [\"./display-automatic-list.component.scss\"]\n            }]\n    }], function () { return [{ type: i1.DisplayAutomaticIndicatorsService }, { type: i2.AlertService }, { type: i2.EnvService }, { type: i3.NgbModal }, { type: i4.UserSelectionService }]; }, { userSelection: [{\n            type: Input\n        }], selectorVisibleFields: [{\n            type: Input\n        }] }); })();\n","<!----------ALERT MESSAGE------------------------- -->\n<div>\n  <app-alert [alertMessage]=\"alertMessage\"></app-alert>\n</div>\n\n<!----------REPORT HEADER------------------------- -->\n<app-display-display-header [userSelection]=\"userSelection\"\n                            [selectorVisibleFields]=\"selectorVisibleFields\"\n                            [timerConnected]=\"timerConnected\"\n                            (returnResult)=\"onReturnHeaderResult($event)\">\n</app-display-display-header>"],"sourceRoot":"webpack:///"}