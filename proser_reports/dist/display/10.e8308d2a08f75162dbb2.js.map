{"version":3,"sources":["./src/app/layout/display/display-agents/display-agents-routing.module.ts","./src/app/layout/display/display-agents/display-agents.component.ts","./src/app/layout/display/display-agents/display-agents.component.ts.pre-build-optimizer.js","./src/app/layout/display/display-agents/display-agents.component.html","./src/app/layout/display/display-agents/display-agents-routing.module.ts.pre-build-optimizer.js","./src/app/layout/display/display-agents/display-agents.module.ts","./src/app/layout/display/display-agents/display-agents.module.ts.pre-build-optimizer.js","./src/app/layout/display/display-agents/display-agents-list/display-agents-list.component.ts","./src/app/layout/display/display-agents/display-agents-list/display-agents-list.component.ts.pre-build-optimizer.js","./src/app/layout/display/display-agents/display-agents-list/display-agents-list.component.html"],"names":["routes","path","component","alertService","envService","userSelectionService","this","userSelection","selectorVisibleFields","title","ngOnInit","setReportTitles","writeUserSelectionHistoric","assignation","auxiliar","DisplayAgentsComponent","ɵfac","t","ɵcmp","type","rf","directives","styles","children","DisplayAgentsRoutingModule","ɵmod","ɵinj","factory","forChild","DisplayAgentsModule","provide","useValue","forRoot","DisplayAgentsListComponent_li_5_Template","ctx","item_r1","$implicit","ctx_r0","displayAgentsIndicatorsService","modalService","subscription","alertMessage","show_columns","show","selected","historic","graph","show_graph_or_table_button","env","model","local_store","currentDate","Date","format","rows","rows_original","getReportList","filterFieldList","fieldList","numberOfRowsInTable","id","value","exportName","initialSelectedFilterField","field_name","name","text","onRepeat","ngOnDestroy","unsubscribe","timerComponent","timerClock","add","subscribe","start_date","timerConnected","res","console","error","status","alertTitle","alertText","statusText","alertShow","alertClass","openDetailModal","content","activeModal","open","windowClass","keyboard","onShowHideGraphButtons","onActivate","event","row_selection","row","onSelect","onReturnHeaderResult","onRecalculate","onReturnNumberOfRowsInTable","onReturnRowsForTable","onObjectToArray","data","output","obj","undefined","Object","entries","map","key","onCreateModel","x","newModel","JSON","stringify","newModel2","replace","model3","eval","openModal","DisplayAgentsListComponent","pipes"],"mappings":"oSAIMA,EAAiB,CACrB,CACEC,KAAM,GACNC,UCGJ,WAUE,WACUC,EACAC,EACAC,GAFA,KAAAF,eACA,KAAAC,aACA,KAAAC,uBAERC,KAAKC,cAAiB,IAAI,IAAmB,YAC7CD,KAAKE,sBAAwB,IAAI,IAAmB,WACpDF,KAAKG,MAAQ,kBCQb,ODLF,YAAAC,SAAA,WACMJ,KAAKC,cAAcE,QAAUH,KAAKG,OACpCH,KAAKK,mBAIT,YAAAA,gBAAA,WAEEL,KAAKC,cAAcE,MAAQH,KAAKG,MAGhCH,KAAKD,qBAAqBO,2BAA2BN,KAAKC,eAE1DD,KAAKE,sBAAsBK,aAAc,EACzCP,KAAKE,sBAAsBM,UAAW,GCftCC,EAAuBC,KAAO,SAAwCC,GAAK,OAAO,IAAKA,GDd9EF,GAAsB,gCCe/BA,EAAuBG,KAAO,KAAqB,CAAEC,KDf5CJ,EAAsB,2IEfnC,4CDgCmB,EAALK,GChCmB,sCAA+B,kDDkCnDC,WAAY,CAAC,KAAgCC,OAAQ,CAAC,MACxDP,EDzBX,GDFIQ,SAAU,KAId,2BIMI,OAHAC,EAA2BC,KAAO,KAAoB,CAAEN,KJC/CK,IIATA,EAA2BE,KAAO,KAAoB,CAAEC,QAAS,SAA4CV,GAAK,OAAO,IAAKA,GJArHO,IAA0B,SAH5B,CAAC,IAAaI,SAAS5B,IACtB,OIIDwB,EJNX,G,YKZA,oDAEA,YAAmB,IAAU,MAwB7B,+BCYI,OAfAK,EAAoBJ,KAAO,KAAoB,CAAEN,KDyBxCU,ICxBTA,EAAoBH,KAAO,KAAoB,CAAEC,QAAS,SAAqCV,GAAK,OAAO,IAAKA,GDwBvGY,IAAmB,UAFnB,CAAC,CAAEC,QAAS,IAAWC,SAAU,OAAO,SAlB1C,CACP,IAEA,IACA,IACA,IACA,IAAUC,UACV,IACA,IACA,IAEA,IACA,IAEA,IAEA,MCNOH,EDZX,I,2EE1BA,yyCCwBA,SAASI,yCAAyCb,EAAIc,GAmBpD,GAnBoE,EAALd,ICR7D,sDACE,sDAAI,uDAA4B,iDAAyB,gDAEzD,yDACE,uDACE,iDAAkD,gDAIpD,uDACE,iDDUN,8CAAU,EAAG,WCTT,gDACA,wDAA8C,kDAC9C,gDACF,gDAEF,iDDWO,EAALA,EAAQ,CACV,IAAIe,EAAUD,EAAIE,UACdC,EAAS,gDC5BqB,qHAI5B,+IAKA,uNAE4C,iHFKtD,0CAwDE,oCACUC,EACAnC,EACAC,EACAmC,EACAlC,GAJA,KAAAiC,iCACA,KAAAnC,eACA,KAAAC,aACA,KAAAmC,eACA,KAAAlC,uBAtDF,KAAAmC,aAA6B,IAAI,oCAOzC,KAAAC,aAAe,IAAI,2DAWnB,KAAAC,cAAe,EACf,KAAAC,MAAO,EACP,KAAAC,SAAW,GAEX,KAAAC,UAAW,EAuBX,KAAAC,OAAQ,EACR,KAAAC,4BAA6B,EAU3BzC,KAAK0C,IAAM5C,EACXE,KAAK2C,MAAQ,IAAI,mEACjB3C,KAAK4C,YAAc,cACnB5C,KAAKE,sBAAwB,IAAI,6CAAmB,WACpDF,KAAKE,sBAAsBK,aAAc,EACzCP,KAAKE,sBAAsBM,UAAW,EACtCR,KAAK6C,YAAc,oCAAO,IAAIC,MAAQC,OAAO,cAC7C/C,KAAKgD,KAAO,IAAI,mEAChBhD,KAAKiD,cAAgB,IAAI,mEC4KzB,ODxKF,qCAAA7C,SAAA,WACEJ,KAAKC,cAAgB,IAAI,6CAAmB,iBAC5CD,KAAKkD,cAAclD,KAAKC,eACxBD,KAAKmD,gBAAkBnD,KAAK2C,MAAMS,YAClCpD,KAAKqD,oBAAsB,CAAEC,GAAI,GAAIC,MAAO,IAC5CvD,KAAKwD,WAAa,mBAElBxD,KAAKyD,2BAA6B,CAChCC,WAAY,aACZC,KAAM,eACNC,KAAM,eAER5D,KAAK6D,YAIP,qCAAAC,YAAA,WACE9D,KAAKkC,aAAa6B,eAGpB,qCAAAF,SAAA,sBAIQG,EAAiB,4CAAM,IAAM,KAC7BC,EAAa,4CAAM,IAAM,KAE/BjE,KAAKkD,cAAclD,KAAKC,eAExBD,KAAKkC,aAAagC,IAChBF,EAAeG,WAAU,WAErB,wDAAqB,EAAKlE,cAAcmE,cACxC,EAAKvB,aAIL,EAAKK,cAAc,EAAKjD,mBAO9BgE,EAAWE,WAAU,WACnB,EAAKE,eAAiB,EAAKA,eAAiB,MAKhD,qCAAAnB,cAAA,SAAcjD,GAAd,WACMA,GACFD,KAAKgC,+BACFkB,cAAcjD,GACdkE,WACC,SAACG,GAGC,EAAKD,eAAiB,EAKjB,EAAK9B,SAFV,EAAKM,cACL,wDAAqB5C,EAAcmE,YAI/BE,EAEF,EAAKtB,KAAOsB,EASZC,QAAQC,MAAM,QAASF,GAEzB,EAAKnC,aAAe,IAAI,8DAE1B,SAAAqC,GACED,QAAQC,MAAM,QAASA,GACvB,EAAKnC,MAAO,EACZ,EAAKxC,aAAa2E,MAAMA,EAAMC,QAC9B,EAAKtC,aAAauC,WAAa,qBAC/B,EAAKvC,aAAawC,UAAYH,EAAMI,WACpC,EAAKzC,aAAa0C,WAAY,EAC9B,EAAK1C,aAAa2C,WAChB,qDAOZ,qCAAAC,gBAAA,SAAgBC,EAAS1C,GACvBtC,KAAKiF,YAAcjF,KAAKiC,aAAaiD,KAAKF,EAAS,CACjDG,YAAa,WACbC,UAAU,KAKd,qCAAAC,uBAAA,WACErF,KAAKwC,OAASxC,KAAKwC,MACnBxC,KAAKyC,4BAA8BzC,KAAKyC,4BAG1C,qCAAA6C,WAAA,SAAWC,GACTvF,KAAKwF,cAAgBD,EAAME,KAK7B,qCAAAC,SAAA,SAASH,GACPvF,KAAKsC,SAAWiD,EAAMjD,UAIxB,qCAAAqD,qBAAA,SAAqBJ,GACnBvF,KAAKC,cAAgB,IAAI,6CAAmB,iBAC5CD,KAAKkD,cAAclD,KAAKC,eACxBD,KAAKyC,4BAA6B,GAKpC,qCAAAmD,cAAA,SAAcL,GACZvF,KAAKC,cAAgB,IAAI,6CAAmB,iBAC5CD,KAAKkD,cAAclD,KAAKC,eACxBD,KAAKyC,4BAA6B,EAClC8B,QAAQC,MAAM,YAAaxE,KAAKgD,OAMlC,qCAAA6C,4BAAA,SAA4BN,GAC1BhB,QAAQC,MAAM,QAASe,GACvBvF,KAAKqD,oBAAsBkC,GAI7B,qCAAAO,qBAAA,SAAqBP,GACnBvF,KAAKgD,KAAOuC,GAId,qCAAAQ,gBAAA,SAAgBC,GACd,IAEIC,EAFAC,EAAMF,EAAK,GASf,YANYG,IAARD,IACFD,EAASG,OAAOC,QAAQH,GAAKI,KAAI,SAAC,GAAiB,OACjDC,IADiC,KAEjChD,MAFsC,UAKnC0C,GAIT,qCAAAO,cAAA,SAAc7D,OACZA,OAAQ,IAAI,oEAAqBS,YAEjCmB,QAAQC,MAAM,QAAS7B,OAEvB,IAAIuD,IAAM,GAEVvD,MAAM2D,KAAI,SAAAG,GACRP,IAAI,GAAGO,EAAE9C,MAAU,KAAO8C,EAAE/C,cAG9B,IAAIgD,SAAWC,KAAKC,UAAUV,KAC1BW,UAAYF,KAAKC,UACnBF,SACGI,QAAQ,MAAO,IACfA,QAAQ,KAAM,MACdA,QAAQ,KAAM,SAEfC,OAASC,KAAKH,WAElBtC,QAAQC,MAAM,QAASuC,SAIzB,qCAAAE,UAAA,SAAUjC,KCxCRkC,2BAA2BxG,KAAO,SAA4CC,GAAK,OAAO,IAAKA,GDzNtFuG,4BAA0B,0fC0NnCA,2BAA2BtG,KAAO,8CAAqB,CAAEC,KD1NhDqG,2BAA0B,oaErCvC,uDACE,+DACF,gDAGA,gFAG4B,iFAAgB,EAAAvB,qBAAA,MAC5C,gDAIA,2DACE,sDACE,sGAiBF,gDAEF,iDDyOmB,EAAL7E,IC1QD,8HAIe,gIAA+B,gDAA/B,CAA+B,mCAUnD,0IDmQKC,WAAY,CAAC,sEAAmB,wFAA2B,iDAAaoG,MAAO,CAAC,iDAAiBnG,OAAQ,CAAC,+pEAC5GkG,2BDnPX","file":"10.e8308d2a08f75162dbb2.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { DisplayAgentsComponent } from \"./display-agents.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: DisplayAgentsComponent,\n    children: []\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DisplayAgentsRoutingModule {}\n","import { Component, OnInit, EventEmitter, Output } from \"@angular/core\";\n\nimport { AlertModel } from \"shared/models/helpers/Alert\";\nimport {\n  AlertService,\n  EnvService,\n  UserSelectionService\n} from \"shared/services\";\nimport { UserSelectionModel } from \"shared/models\";\n\n@Component({\n  selector: \"app-display-display-agents\",\n  templateUrl: \"./display-agents.component.html\",\n  styleUrls: [\"./display-agents.component.scss\"]\n})\nexport class DisplayAgentsComponent implements OnInit {\n  userSelection: UserSelectionModel;\n  selectorVisibleFields: UserSelectionModel;\n  title;\n\n  constructor(\n    private alertService: AlertService,\n    private envService: EnvService,\n    private userSelectionService: UserSelectionService\n  ) {\n    this.userSelection =  new UserSelectionModel('standard');\n    this.selectorVisibleFields = new UserSelectionModel(\"visible\");\n    this.title = \"Display agentes\";\n  }\n\n  ngOnInit() {\n    if (this.userSelection.title !== this.title) {\n      this.setReportTitles();\n    }\n  }\n\n  setReportTitles() {\n    // this.userSelection = new UserSelectionModel(\"userSelection\");\n    this.userSelection.title = this.title;\n    // //\n    // //\n    this.userSelectionService.writeUserSelectionHistoric(this.userSelection);\n\n    this.selectorVisibleFields.assignation = false;\n    this.selectorVisibleFields.auxiliar = false;\n  }\n}\n","import { Component } from \"@angular/core\";\nimport { AlertService, EnvService, UserSelectionService } from \"shared/services\";\nimport { UserSelectionModel } from \"shared/models\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"shared/services\";\nimport * as i2 from \"./display-agents-list/display-agents-list.component\";\nvar DisplayAgentsComponent = /** @class */ (function () {\n    function DisplayAgentsComponent(alertService, envService, userSelectionService) {\n        this.alertService = alertService;\n        this.envService = envService;\n        this.userSelectionService = userSelectionService;\n        this.userSelection = new UserSelectionModel('standard');\n        this.selectorVisibleFields = new UserSelectionModel(\"visible\");\n        this.title = \"Display agentes\";\n    }\n    DisplayAgentsComponent.prototype.ngOnInit = function () {\n        if (this.userSelection.title !== this.title) {\n            this.setReportTitles();\n        }\n    };\n    DisplayAgentsComponent.prototype.setReportTitles = function () {\n        // this.userSelection = new UserSelectionModel(\"userSelection\");\n        this.userSelection.title = this.title;\n        // //\n        // //\n        this.userSelectionService.writeUserSelectionHistoric(this.userSelection);\n        this.selectorVisibleFields.assignation = false;\n        this.selectorVisibleFields.auxiliar = false;\n    };\n    DisplayAgentsComponent.ɵfac = function DisplayAgentsComponent_Factory(t) { return new (t || DisplayAgentsComponent)(i0.ɵɵdirectiveInject(i1.AlertService), i0.ɵɵdirectiveInject(i1.EnvService), i0.ɵɵdirectiveInject(i1.UserSelectionService)); };\n    DisplayAgentsComponent.ɵcmp = i0.ɵɵdefineComponent({ type: DisplayAgentsComponent, selectors: [[\"app-display-display-agents\"]], decls: 1, vars: 2, consts: [[3, \"userSelection\", \"selectorVisibleFields\"]], template: function DisplayAgentsComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelement(0, \"app-display-display-agents-list\", 0);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"userSelection\", ctx.userSelection)(\"selectorVisibleFields\", ctx.selectorVisibleFields);\n        } }, directives: [i2.DisplayAgentsListComponent], styles: [\"\"] });\n    return DisplayAgentsComponent;\n}());\nexport { DisplayAgentsComponent };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayAgentsComponent, [{\n        type: Component,\n        args: [{\n                selector: \"app-display-display-agents\",\n                templateUrl: \"./display-agents.component.html\",\n                styleUrls: [\"./display-agents.component.scss\"]\n            }]\n    }], function () { return [{ type: i1.AlertService }, { type: i1.EnvService }, { type: i1.UserSelectionService }]; }, null); })();\n","<app-display-display-agents-list [userSelection]=\"userSelection\"\n                                 [selectorVisibleFields]=\"selectorVisibleFields\">\n</app-display-display-agents-list>","import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { DisplayAgentsComponent } from \"./display-agents.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nvar routes = [\n    {\n        path: \"\",\n        component: DisplayAgentsComponent,\n        children: []\n    }\n];\nvar DisplayAgentsRoutingModule = /** @class */ (function () {\n    function DisplayAgentsRoutingModule() {\n    }\n    DisplayAgentsRoutingModule.ɵmod = i0.ɵɵdefineNgModule({ type: DisplayAgentsRoutingModule });\n    DisplayAgentsRoutingModule.ɵinj = i0.ɵɵdefineInjector({ factory: function DisplayAgentsRoutingModule_Factory(t) { return new (t || DisplayAgentsRoutingModule)(); }, imports: [[RouterModule.forChild(routes)],\n            RouterModule] });\n    return DisplayAgentsRoutingModule;\n}());\nexport { DisplayAgentsRoutingModule };\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DisplayAgentsRoutingModule, { imports: [i1.RouterModule], exports: [RouterModule] }); })();\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayAgentsRoutingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [RouterModule.forChild(routes)],\n                exports: [RouterModule]\n            }]\n    }], null, null); })();\n","import { registerLocaleData } from \"@angular/common\";\nimport localeEs from \"@angular/common/locales/es\";\nregisterLocaleData(localeEs, \"es\");\nimport { LOCALE_ID } from \"@angular/core\";\n\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { AlertModule } from \"shared/modules/alert/alert.module\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport * as Chart from \"chart.js\";\nimport * as ChartDataLabels from \"chartjs-plugin-datalabels\";\nimport { ChartsModule as Ng2Charts } from \"ng2-charts\";\nimport { NgxDatatableModule } from \"@swimlane/ngx-datatable\";\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { NgSelectModule } from \"@ng-select/ng-select\";\n\nimport { SelectorModule } from \"shared/modules/selector/selector.module\";\n\nimport { DisplayHeaderModule } from \"sections/display/src/shared/modules/display-header/display-header.module\";\n\nimport { DisplayAgentsRoutingModule } from \"./display-agents-routing.module\";\nimport { DisplayAgentsComponent } from \"./display-agents.component\";\nimport { DisplayAgentsListComponent } from './display-agents-list/display-agents-list.component';\nimport { FontAwesomeModule } from \"@fortawesome/angular-fontawesome\";\n\n@NgModule({\n  declarations: [DisplayAgentsComponent, DisplayAgentsListComponent],\n  imports: [\n    CommonModule,\n\n    AlertModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbModule.forRoot(),\n    NgSelectModule,\n    NgxDatatableModule,\n    Ng2Charts,\n\n    SelectorModule,\n    DisplayHeaderModule,\n\n    FontAwesomeModule,\n\n    DisplayAgentsRoutingModule\n  ],\n  providers: [{ provide: LOCALE_ID, useValue: \"es\" }]\n})\nexport class DisplayAgentsModule { }\n","import { registerLocaleData } from \"@angular/common\";\nimport localeEs from \"@angular/common/locales/es\";\nimport { LOCALE_ID } from \"@angular/core\";\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { AlertModule } from \"shared/modules/alert/alert.module\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { ChartsModule as Ng2Charts } from \"ng2-charts\";\nimport { NgxDatatableModule } from \"@swimlane/ngx-datatable\";\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { NgSelectModule } from \"@ng-select/ng-select\";\nimport { SelectorModule } from \"shared/modules/selector/selector.module\";\nimport { DisplayHeaderModule } from \"sections/display/src/shared/modules/display-header/display-header.module\";\nimport { DisplayAgentsRoutingModule } from \"./display-agents-routing.module\";\nimport { DisplayAgentsComponent } from \"./display-agents.component\";\nimport { DisplayAgentsListComponent } from './display-agents-list/display-agents-list.component';\nimport { FontAwesomeModule } from \"@fortawesome/angular-fontawesome\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nregisterLocaleData(localeEs, \"es\");\nvar DisplayAgentsModule = /** @class */ (function () {\n    function DisplayAgentsModule() {\n    }\n    DisplayAgentsModule.ɵmod = i0.ɵɵdefineNgModule({ type: DisplayAgentsModule });\n    DisplayAgentsModule.ɵinj = i0.ɵɵdefineInjector({ factory: function DisplayAgentsModule_Factory(t) { return new (t || DisplayAgentsModule)(); }, providers: [{ provide: LOCALE_ID, useValue: \"es\" }], imports: [[\n                CommonModule,\n                AlertModule,\n                FormsModule,\n                ReactiveFormsModule,\n                NgbModule.forRoot(),\n                NgSelectModule,\n                NgxDatatableModule,\n                Ng2Charts,\n                SelectorModule,\n                DisplayHeaderModule,\n                FontAwesomeModule,\n                DisplayAgentsRoutingModule\n            ]] });\n    return DisplayAgentsModule;\n}());\nexport { DisplayAgentsModule };\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DisplayAgentsModule, { declarations: [DisplayAgentsComponent, DisplayAgentsListComponent], imports: [CommonModule,\n        AlertModule,\n        FormsModule,\n        ReactiveFormsModule, i1.NgbModule, NgSelectModule,\n        NgxDatatableModule,\n        Ng2Charts,\n        SelectorModule,\n        DisplayHeaderModule,\n        FontAwesomeModule,\n        DisplayAgentsRoutingModule] }); })();\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayAgentsModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [DisplayAgentsComponent, DisplayAgentsListComponent],\n                imports: [\n                    CommonModule,\n                    AlertModule,\n                    FormsModule,\n                    ReactiveFormsModule,\n                    NgbModule.forRoot(),\n                    NgSelectModule,\n                    NgxDatatableModule,\n                    Ng2Charts,\n                    SelectorModule,\n                    DisplayHeaderModule,\n                    FontAwesomeModule,\n                    DisplayAgentsRoutingModule\n                ],\n                providers: [{ provide: LOCALE_ID, useValue: \"es\" }]\n            }]\n    }], null, null); })();\n","import { Component, OnInit, OnDestroy, Input, ViewChild } from \"@angular/core\";\n\n// Installed modules\nimport { Observable, Subscription, timer } from \"rxjs\";\nimport * as moment from \"moment\";\nimport {\n  NgbModal,\n  ModalDismissReasons,\n  NgbActiveModal,\n  NgbModalRef\n} from \"@ng-bootstrap/ng-bootstrap\";\n\n// Global shared functions import\nimport { getUpdateFilter } from \"shared/functions\";\nimport { objectDateToTextDate, textDateToObjectDate } from \"shared/functions\";\n\n// Global shared models\nimport { AlertModel } from \"shared/models/helpers/Alert\";\nimport { UserSelectionModel } from \"shared/models\";\n\n// Global shared services\nimport { AlertService, EnvService } from \"shared/services\";\nimport { UserSelectionService } from \"shared/services/\";\n\n// Local models\nimport {\n  DisplayAgentsModel,\n  DisplayAgentsResponseModel\n} from \"sections/display/src/shared/models/\";\n\n// Local shared\nimport { DisplayAgentsIndicatorsService } from \"sections/display/src/shared/services/\";\n\n@Component({\n  selector: \"app-display-display-agents-list\",\n  templateUrl: \"./display-agents-list.component.html\",\n  styleUrls: [\"./display-agents-list.component.scss\"]\n})\nexport class DisplayAgentsListComponent implements OnInit, OnDestroy {\n  // Subscription\n  private subscription: Subscription = new Subscription();\n\n  // Variables that come from main component\n  @Input() userSelection: UserSelectionModel;\n  @Input() selectorVisibleFields: UserSelectionModel;\n\n  // Component variables\n  alertMessage = new AlertModel();\n  env;\n\n  // Selector variables\n  local_store;\n\n  // Realtime variables\n  timerConnected;\n  currentDate;\n\n  // Show variables\n  show_columns = false; // shows or hides a colum\n  show = false; // shows or hides the table\n  selected = [];\n  idealResponseTime;\n  historic = false;\n\n  // Filter variables\n  numberOfRowsInTable;\n  filterFieldList;\n  initialSelectedFilterField;\n  findInList;\n\n  // Variable to display values\n  model: DisplayAgentsModel;\n  rows: DisplayAgentsResponseModel;\n  rows_original: DisplayAgentsResponseModel;\n  rows_total;\n  rows_detail;\n  rows_detail_original;\n  rows_detail_total;\n  row_selection;\n  exportName;\n\n  // Modal window variables\n  activeModal: NgbActiveModal;\n\n  // Graph variables\n  graph = false;\n  show_graph_or_table_button = false;\n\n  // Init\n  constructor(\n    private displayAgentsIndicatorsService: DisplayAgentsIndicatorsService,\n    private alertService: AlertService,\n    private envService: EnvService,\n    private modalService: NgbModal,\n    private userSelectionService: UserSelectionService\n  ) {\n    this.env = envService;\n    this.model = new DisplayAgentsModel();\n    this.local_store = \"assignation\";\n    this.selectorVisibleFields = new UserSelectionModel(\"visible\");\n    this.selectorVisibleFields.assignation = false;\n    this.selectorVisibleFields.auxiliar = false;\n    this.currentDate = moment(new Date()).format(\"YYYY-MM-DD\");\n    this.rows = new DisplayAgentsResponseModel();\n    this.rows_original = new DisplayAgentsResponseModel();\n  }\n\n  // Start\n  ngOnInit() {\n    this.userSelection = new UserSelectionModel(\"userSelection\");\n    this.getReportList(this.userSelection);\n    this.filterFieldList = this.model.fieldList();\n    this.numberOfRowsInTable = { id: 10, value: 10 };\n    this.exportName = \"reporte-conexión\";\n\n    this.initialSelectedFilterField = {\n      field_name: \"start_date\",\n      name: \"fecha_inicio\",\n      text: \"Fecha desde\"\n    };\n    this.onRepeat();\n  }\n\n  // Finish\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  onRepeat() {\n    // this.show_agents = true;\n    // this.show_highlights = false;\n\n    const timerComponent = timer(1000, 5000);\n    const timerClock = timer(1000, 1000);\n\n    this.getReportList(this.userSelection);\n\n    this.subscription.add(\n      timerComponent.subscribe(() => {\n        if (\n          objectDateToTextDate(this.userSelection.start_date) ===\n          this.currentDate\n        ) {\n          // this.historic_mode = false;\n          // this.userSelection.historic_mode = false;\n          this.getReportList(this.userSelection);\n        } else {\n          // this.historic_mode = true;\n          // this.userSelection.historic_mode = true;\n        }\n      })\n    );\n    timerClock.subscribe(() => {\n      this.timerConnected = this.timerConnected + 1;\n    });\n  }\n\n  // Get records from backend\n  getReportList(userSelection: UserSelectionModel) {\n    if (userSelection) {\n      this.displayAgentsIndicatorsService\n        .getReportList(userSelection)\n        .subscribe(\n          (res: DisplayAgentsResponseModel) => {\n            // this.show = false;\n\n            this.timerConnected = 0;\n            // console.error(\"res\", res);\n\n            this.currentDate !==\n            objectDateToTextDate(userSelection.start_date)\n              ? (this.historic = true)\n              : (this.historic = false);\n\n            if (res) {\n              // res.colors = res.colors[0];\n              this.rows = res;\n              // this.highligthts.onExtractVariables(this.rows);\n\n              // console.error(\"rows\", this.rows);\n\n              // this.childGraph\n              //   ? this.childGraph.generateGraph(\"service\", this.rows)\n              //   : \"\";\n            } else {\n              console.error(\"Error\", res);\n            }\n            this.alertMessage = new AlertModel();\n          },\n          error => {\n            console.error(\"Error\", error);\n            this.show = false;\n            this.alertService.error(error.status);\n            this.alertMessage.alertTitle = \"Error del servidor\";\n            this.alertMessage.alertText = error.statusText;\n            this.alertMessage.alertShow = true;\n            this.alertMessage.alertClass =\n              \"alert alert-danger alert-dismissible fade show\";\n          }\n        );\n    }\n  }\n\n  // Show modal detail window\n  openDetailModal(content, selected) {\n    this.activeModal = this.modalService.open(content, {\n      windowClass: \"my-class\",\n      keyboard: false\n    });\n  }\n\n  // Show or hide graph or table buttons\n  onShowHideGraphButtons() {\n    this.graph = !this.graph;\n    this.show_graph_or_table_button = !this.show_graph_or_table_button;\n  }\n  // Data table activate\n  onActivate(event) {\n    this.row_selection = event.row;\n    if (event.type === \"dblclick\") {\n    }\n  }\n  // Datatable select\n  onSelect(event) {\n    this.selected = event.selected;\n  }\n\n  // Update on return of selector in header\n  onReturnHeaderResult(event) {\n    this.userSelection = new UserSelectionModel(\"userSelection\");\n    this.getReportList(this.userSelection);\n    this.show_graph_or_table_button = false;\n    //  this.childGraph ? this.childGraph.generateGraph(\"header\", this.rows) : \"\";\n  }\n\n  // Activated by button\n  onRecalculate(event) {\n    this.userSelection = new UserSelectionModel(\"userSelection\");\n    this.getReportList(this.userSelection);\n    this.show_graph_or_table_button = false;\n    console.error(\"this.rows\", this.rows);\n\n    // this.childGraph ? this.childGraph.generateGraph(\"button\", this.rows) : \"\";\n  }\n\n  // Response report finder to display number of rows in table\n  onReturnNumberOfRowsInTable(event) {\n    console.error(\"event\", event);\n    this.numberOfRowsInTable = event;\n  }\n\n  // Response report finder\n  onReturnRowsForTable(event) {\n    this.rows = event;\n  }\n\n  // Helper function to expose detail fields from a row\n  onObjectToArray(data) {\n    let obj = data[0];\n\n    let output;\n    if (obj !== undefined) {\n      output = Object.entries(obj).map(([key, value]) => ({\n        key,\n        value\n      }));\n    }\n    return output;\n  }\n\n  // temporary method to generate excel map for exporting model\n  onCreateModel(model?) {\n    model = new DisplayAgentsModel().fieldList();\n\n    console.error(\"model\", model);\n\n    let obj = {};\n\n    model.map(x => {\n      obj[`${x.name}`] = \"x.\" + x.field_name;\n    });\n\n    let newModel = JSON.stringify(obj);\n    let newModel2 = JSON.stringify(\n      newModel\n        .replace(/\\\"/g, \"\")\n        .replace(/:/g, \": \")\n        .replace(/,/g, \",\\n \")\n    );\n    let model3 = eval(newModel2);\n\n    console.error(\"model\", model3);\n  }\n\n  //Test function for modal\n  openModal(content) {\n    // this.rows_detail = this.rows_detail_original.filter(x => {\n    //   return x.agent_id === this.row_selection.agent_id;\n    // });\n    // this.rows_detail_total = this.rows_original.filter(x => {\n    //   return x.agent_id === this.row_selection.agent_id;\n    // });\n    // this.activeModal = this.modalService.open(content, {\n    //   windowClass: \"my-class\",\n    //   keyboard: false\n    // });\n  }\n}\n","import { Component, Input } from \"@angular/core\";\n// Installed modules\nimport { Subscription, timer } from \"rxjs\";\nimport * as moment from \"moment\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { objectDateToTextDate } from \"shared/functions\";\n// Global shared models\nimport { AlertModel } from \"shared/models/helpers/Alert\";\nimport { UserSelectionModel } from \"shared/models\";\n// Global shared services\nimport { AlertService, EnvService } from \"shared/services\";\nimport { UserSelectionService } from \"shared/services/\";\n// Local models\nimport { DisplayAgentsModel, DisplayAgentsResponseModel } from \"sections/display/src/shared/models/\";\n// Local shared\nimport { DisplayAgentsIndicatorsService } from \"sections/display/src/shared/services/\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"sections/display/src/shared/services/\";\nimport * as i2 from \"shared/services\";\nimport * as i3 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i4 from \"shared/services/\";\nimport * as i5 from \"../../../../../../../../shared/modules/alert/alert.component\";\nimport * as i6 from \"../../../../../shared/modules/display-header/display-header.component\";\nimport * as i7 from \"@angular/common\";\nfunction DisplayAgentsListComponent_li_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵelementStart(1, \"h1\");\n    i0.ɵɵelement(2, \"i\", 3);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 4);\n    i0.ɵɵelementStart(5, \"p\", 5);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\", 6);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"percent\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\", 7);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    var item_r1 = ctx.$implicit;\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \\u00A0\", item_r1.agent_name, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\" \", item_r1.rca_agent_status, \"-\", item_r1.rca_group_name, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(9, 5, item_r1.value / ctx_r0.rows.agentsConnectedTotal[0].agentsConnectedTotal), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \\u00A0\", item_r1.name, \" \");\n} }\nvar DisplayAgentsListComponent = /** @class */ (function () {\n    // Init\n    function DisplayAgentsListComponent(displayAgentsIndicatorsService, alertService, envService, modalService, userSelectionService) {\n        this.displayAgentsIndicatorsService = displayAgentsIndicatorsService;\n        this.alertService = alertService;\n        this.envService = envService;\n        this.modalService = modalService;\n        this.userSelectionService = userSelectionService;\n        // Subscription\n        this.subscription = new Subscription();\n        // Component variables\n        this.alertMessage = new AlertModel();\n        // Show variables\n        this.show_columns = false; // shows or hides a colum\n        this.show = false; // shows or hides the table\n        this.selected = [];\n        this.historic = false;\n        // Graph variables\n        this.graph = false;\n        this.show_graph_or_table_button = false;\n        this.env = envService;\n        this.model = new DisplayAgentsModel();\n        this.local_store = \"assignation\";\n        this.selectorVisibleFields = new UserSelectionModel(\"visible\");\n        this.selectorVisibleFields.assignation = false;\n        this.selectorVisibleFields.auxiliar = false;\n        this.currentDate = moment(new Date()).format(\"YYYY-MM-DD\");\n        this.rows = new DisplayAgentsResponseModel();\n        this.rows_original = new DisplayAgentsResponseModel();\n    }\n    // Start\n    DisplayAgentsListComponent.prototype.ngOnInit = function () {\n        this.userSelection = new UserSelectionModel(\"userSelection\");\n        this.getReportList(this.userSelection);\n        this.filterFieldList = this.model.fieldList();\n        this.numberOfRowsInTable = { id: 10, value: 10 };\n        this.exportName = \"reporte-conexión\";\n        this.initialSelectedFilterField = {\n            field_name: \"start_date\",\n            name: \"fecha_inicio\",\n            text: \"Fecha desde\"\n        };\n        this.onRepeat();\n    };\n    // Finish\n    DisplayAgentsListComponent.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    DisplayAgentsListComponent.prototype.onRepeat = function () {\n        // this.show_agents = true;\n        // this.show_highlights = false;\n        var _this = this;\n        var timerComponent = timer(1000, 5000);\n        var timerClock = timer(1000, 1000);\n        this.getReportList(this.userSelection);\n        this.subscription.add(timerComponent.subscribe(function () {\n            if (objectDateToTextDate(_this.userSelection.start_date) ===\n                _this.currentDate) {\n                // this.historic_mode = false;\n                // this.userSelection.historic_mode = false;\n                _this.getReportList(_this.userSelection);\n            }\n            else {\n                // this.historic_mode = true;\n                // this.userSelection.historic_mode = true;\n            }\n        }));\n        timerClock.subscribe(function () {\n            _this.timerConnected = _this.timerConnected + 1;\n        });\n    };\n    // Get records from backend\n    DisplayAgentsListComponent.prototype.getReportList = function (userSelection) {\n        var _this = this;\n        if (userSelection) {\n            this.displayAgentsIndicatorsService\n                .getReportList(userSelection)\n                .subscribe(function (res) {\n                // this.show = false;\n                _this.timerConnected = 0;\n                // console.error(\"res\", res);\n                _this.currentDate !==\n                    objectDateToTextDate(userSelection.start_date)\n                    ? (_this.historic = true)\n                    : (_this.historic = false);\n                if (res) {\n                    // res.colors = res.colors[0];\n                    _this.rows = res;\n                    // this.highligthts.onExtractVariables(this.rows);\n                    // console.error(\"rows\", this.rows);\n                    // this.childGraph\n                    //   ? this.childGraph.generateGraph(\"service\", this.rows)\n                    //   : \"\";\n                }\n                else {\n                    console.error(\"Error\", res);\n                }\n                _this.alertMessage = new AlertModel();\n            }, function (error) {\n                console.error(\"Error\", error);\n                _this.show = false;\n                _this.alertService.error(error.status);\n                _this.alertMessage.alertTitle = \"Error del servidor\";\n                _this.alertMessage.alertText = error.statusText;\n                _this.alertMessage.alertShow = true;\n                _this.alertMessage.alertClass =\n                    \"alert alert-danger alert-dismissible fade show\";\n            });\n        }\n    };\n    // Show modal detail window\n    DisplayAgentsListComponent.prototype.openDetailModal = function (content, selected) {\n        this.activeModal = this.modalService.open(content, {\n            windowClass: \"my-class\",\n            keyboard: false\n        });\n    };\n    // Show or hide graph or table buttons\n    DisplayAgentsListComponent.prototype.onShowHideGraphButtons = function () {\n        this.graph = !this.graph;\n        this.show_graph_or_table_button = !this.show_graph_or_table_button;\n    };\n    // Data table activate\n    DisplayAgentsListComponent.prototype.onActivate = function (event) {\n        this.row_selection = event.row;\n        if (event.type === \"dblclick\") {\n        }\n    };\n    // Datatable select\n    DisplayAgentsListComponent.prototype.onSelect = function (event) {\n        this.selected = event.selected;\n    };\n    // Update on return of selector in header\n    DisplayAgentsListComponent.prototype.onReturnHeaderResult = function (event) {\n        this.userSelection = new UserSelectionModel(\"userSelection\");\n        this.getReportList(this.userSelection);\n        this.show_graph_or_table_button = false;\n        //  this.childGraph ? this.childGraph.generateGraph(\"header\", this.rows) : \"\";\n    };\n    // Activated by button\n    DisplayAgentsListComponent.prototype.onRecalculate = function (event) {\n        this.userSelection = new UserSelectionModel(\"userSelection\");\n        this.getReportList(this.userSelection);\n        this.show_graph_or_table_button = false;\n        console.error(\"this.rows\", this.rows);\n        // this.childGraph ? this.childGraph.generateGraph(\"button\", this.rows) : \"\";\n    };\n    // Response report finder to display number of rows in table\n    DisplayAgentsListComponent.prototype.onReturnNumberOfRowsInTable = function (event) {\n        console.error(\"event\", event);\n        this.numberOfRowsInTable = event;\n    };\n    // Response report finder\n    DisplayAgentsListComponent.prototype.onReturnRowsForTable = function (event) {\n        this.rows = event;\n    };\n    // Helper function to expose detail fields from a row\n    DisplayAgentsListComponent.prototype.onObjectToArray = function (data) {\n        var obj = data[0];\n        var output;\n        if (obj !== undefined) {\n            output = Object.entries(obj).map(function (_a) {\n                var key = _a[0], value = _a[1];\n                return ({\n                    key: key,\n                    value: value\n                });\n            });\n        }\n        return output;\n    };\n    // temporary method to generate excel map for exporting model\n    DisplayAgentsListComponent.prototype.onCreateModel = function (model) {\n        model = new DisplayAgentsModel().fieldList();\n        console.error(\"model\", model);\n        var obj = {};\n        model.map(function (x) {\n            obj[\"\" + x.name] = \"x.\" + x.field_name;\n        });\n        var newModel = JSON.stringify(obj);\n        var newModel2 = JSON.stringify(newModel\n            .replace(/\\\"/g, \"\")\n            .replace(/:/g, \": \")\n            .replace(/,/g, \",\\n \"));\n        var model3 = eval(newModel2);\n        console.error(\"model\", model3);\n    };\n    //Test function for modal\n    DisplayAgentsListComponent.prototype.openModal = function (content) {\n        // this.rows_detail = this.rows_detail_original.filter(x => {\n        //   return x.agent_id === this.row_selection.agent_id;\n        // });\n        // this.rows_detail_total = this.rows_original.filter(x => {\n        //   return x.agent_id === this.row_selection.agent_id;\n        // });\n        // this.activeModal = this.modalService.open(content, {\n        //   windowClass: \"my-class\",\n        //   keyboard: false\n        // });\n    };\n    DisplayAgentsListComponent.ɵfac = function DisplayAgentsListComponent_Factory(t) { return new (t || DisplayAgentsListComponent)(i0.ɵɵdirectiveInject(i1.DisplayAgentsIndicatorsService), i0.ɵɵdirectiveInject(i2.AlertService), i0.ɵɵdirectiveInject(i2.EnvService), i0.ɵɵdirectiveInject(i3.NgbModal), i0.ɵɵdirectiveInject(i4.UserSelectionService)); };\n    DisplayAgentsListComponent.ɵcmp = i0.ɵɵdefineComponent({ type: DisplayAgentsListComponent, selectors: [[\"app-display-display-agents-list\"]], inputs: { userSelection: \"userSelection\", selectorVisibleFields: \"selectorVisibleFields\" }, decls: 6, vars: 5, consts: [[3, \"alertMessage\"], [3, \"userSelection\", \"selectorVisibleFields\", \"timerConnected\", \"returnResult\"], [4, \"ngFor\", \"ngForOf\"], [1, \"fas\", \"fa-user\"], [1, \"element\"], [1, \"small\"], [1, \"indicadores-porcentaje\"], [1, \"indicadores-descripcion\", \"text-left\"]], template: function DisplayAgentsListComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\");\n            i0.ɵɵelement(1, \"app-alert\", 0);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"app-display-display-header\", 1);\n            i0.ɵɵlistener(\"returnResult\", function DisplayAgentsListComponent_Template_app_display_display_header_returnResult_2_listener($event) { return ctx.onReturnHeaderResult($event); });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"section\");\n            i0.ɵɵelementStart(4, \"ul\");\n            i0.ɵɵtemplate(5, DisplayAgentsListComponent_li_5_Template, 12, 7, \"li\", 2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n        } if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"alertMessage\", ctx.alertMessage);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"userSelection\", ctx.userSelection)(\"selectorVisibleFields\", ctx.selectorVisibleFields)(\"timerConnected\", ctx.timerConnected);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", ctx.rows.agentsConnectedByGroup);\n        } }, directives: [i5.AlertComponent, i6.DisplayHeaderComponent, i7.NgForOf], pipes: [i7.PercentPipe], styles: [\".frame[_ngcontent-%COMP%]{border:1px solid #d3d3d3;border-radius:5px;min-height:50vh}.tablegraph[_ngcontent-%COMP%]{margin:0;padding:3px}.tablegraph-subtitles[_ngcontent-%COMP%]{margin:200;padding:3px 0 .5rem;background:#d3d3d3;font-size:1.2rem;font-weight:400;text-align:center}.tablegraph-table[_ngcontent-%COMP%]{display:grid;grid-template-columns:4fr 1fr;margin:0;padding:5px 5px 0}.tablegraph-table[_ngcontent-%COMP%]:hover{color:#242488;border:1px solid #5e5b5b;border-radius:5px;box-shadow:0 4px 8px 0 rgba(0,0,0,.2),0 6px 20px 0 rgba(0,0,0,.19)}.tablegraph-table[_ngcontent-%COMP%]:nth-child(even){background:#f2f2f2}.tablegraph-table[_ngcontent-%COMP%]:nth-child(odd){background:#fff}.tablegraph-table[_ngcontent-%COMP%]:first-child{background:#f2f2f2;margin-top:10px}.tablegraph-table[_ngcontent-%COMP%]:last-child{background:#fff;margin-bottom:10px}.tablegraph-text[_ngcontent-%COMP%]{font-size:1rem;padding:5px 20px 0 0;color:#495057}.tablegraph-number[_ngcontent-%COMP%]{text-align:right;font-size:1.4rem;font-weight:400;padding-top:0}.pointer[_ngcontent-%COMP%]{cursor:pointer}@media screen and (max-width:1200px){.tablegraph-table[_ngcontent-%COMP%]{display:grid;grid-template-columns:4fr 1fr;margin:0;padding:5px 5px 0}}@media screen and (max-width:992px){.tablegraph-table[_ngcontent-%COMP%]{display:grid;grid-template-columns:3fr 1fr;margin:0;padding:5px 5px 0}}@media screen and (max-width:768px){.tablegraph-table[_ngcontent-%COMP%]{display:grid;grid-template-columns:2fr 1fr;margin:0;padding:5px 5px 0}}@media screen and (max-width:576px){.tablegraph-table[_ngcontent-%COMP%]{display:grid;grid-template-columns:2fr 1fr;margin:0;padding:5px 5px 0}}.table[_ngcontent-%COMP%]{display:flex}.element[_ngcontent-%COMP%]{display:grid;grid-template-columns:1fr 4fr;grid-gap:1px 5px 1px 1px}.indicadores[_ngcontent-%COMP%]{margin:10px;font-size:1rem;color:gray}.indicadores-cantidad[_ngcontent-%COMP%]{font-size:1.5rem;max-width:40%}.indicadores-descripcion[_ngcontent-%COMP%]{max-width:50%}.indicadores-porcentaje[_ngcontent-%COMP%]{max-width:10%}.indicadores-subtitles[_ngcontent-%COMP%]{margin:200;padding:3px 0 .5rem;background:#d3d3d3;font-size:1rem;font-weight:400;text-align:center}\"] });\n    return DisplayAgentsListComponent;\n}());\nexport { DisplayAgentsListComponent };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayAgentsListComponent, [{\n        type: Component,\n        args: [{\n                selector: \"app-display-display-agents-list\",\n                templateUrl: \"./display-agents-list.component.html\",\n                styleUrls: [\"./display-agents-list.component.scss\"]\n            }]\n    }], function () { return [{ type: i1.DisplayAgentsIndicatorsService }, { type: i2.AlertService }, { type: i2.EnvService }, { type: i3.NgbModal }, { type: i4.UserSelectionService }]; }, { userSelection: [{\n            type: Input\n        }], selectorVisibleFields: [{\n            type: Input\n        }] }); })();\n","<!----------ALERT MESSAGE------------------------- -->\n<div>\n  <app-alert [alertMessage]=\"alertMessage\"></app-alert>\n</div>\n\n<!----------REPORT HEADER------------------------- -->\n<app-display-display-header [userSelection]=\"userSelection\"\n                            [selectorVisibleFields]=\"selectorVisibleFields\"\n                            [timerConnected]=\"timerConnected\"\n                            (returnResult)=\"onReturnHeaderResult($event)\">\n</app-display-display-header>\n\n\n\n<section>\n  <ul>\n    <li *ngFor=\"let item of rows.agentsConnectedByGroup\">\n      <h1><i class=\"fas fa-user\"></i> &nbsp;{{item.agent_name}}</h1>\n\n      <div class=\"element\">\n        <p class=\"small\">\n          {{ item.rca_agent_status}}-{{item.rca_group_name}}</p>\n        <!-- <p class=\"indicadores-cantidad\"\n             [ngStyle]=\"{ 'color': getColor(item.color) }\"><i\n               class=\"fas fa-user\"></i> </p> -->\n        <p class=\"indicadores-porcentaje\">\n          {{ (item.value / (rows.agentsConnectedTotal[0].agentsConnectedTotal)) | percent }}\n        </p>\n        <p class=\"indicadores-descripcion text-left\"> &nbsp;{{ item.name}}\n        </p>\n      </div>\n\n    </li>\n  </ul>\n\n</section>\n\n\n<!-- {{ rows | json}} -->"],"sourceRoot":"webpack:///"}