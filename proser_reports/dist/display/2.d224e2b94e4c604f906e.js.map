{"version":3,"sources":["./src/shared/models/display-agents/DisplayAgents.model.ts","./src/shared/models/display-agents/DisplayAgentsResponse.model.ts","./src/shared/models/display-automatic/DisplayAutomatic.model.ts","./src/shared/models/display-automatic/DisplayAutomaticResponse.model.ts","./src/shared/models/display-monitor/DisplayMonitorByCalls.model.ts","./src/shared/models/display-monitor/DisplayMonitorByAgents.model.ts","./src/shared/models/display-monitor/DisplayMonitorByIndicators.model.ts","./src/shared/models/index.ts","./src/shared/models/display-inbound/DisplayInbound.model.ts","./src/shared/services/display-outbound/display-outbound-indicators.service.ts","./src/shared/services/display-outbound/display-outbound-indicators.service.ts.pre-build-optimizer.js","./src/shared/services/display-inbound/display-inbound-indicators.service.ts","./src/shared/services/display-inbound/display-inbound-indicators.service.ts.pre-build-optimizer.js","./src/shared/models/display-outbound/DisplayOutbound.model.ts","./src/shared/models/display-outbound/DisplayOutboundResponse.model.ts","./src/shared/models/display-inbound/DisplayInboundResponse.model.ts","./src/shared/services/display-agents/display-agents-indicators.service.ts","./src/shared/services/display-agents/display-agents-indicators.service.ts.pre-build-optimizer.js","./src/shared/services/display-automatic/display-automatic-indicators.service.ts","./src/shared/services/display-automatic/display-automatic-indicators.service.ts.pre-build-optimizer.js","./src/shared/services/display-monitor/display-monitor-by-calls.service.ts","./src/shared/services/display-monitor/display-monitor-by-calls.service.ts.pre-build-optimizer.js","./src/shared/services/display-monitor/display-monitor-by-agents.service.ts","./src/shared/services/display-monitor/display-monitor-by-agents.service.ts.pre-build-optimizer.js","./src/shared/services/display-monitor/display-monitor-by-indicators.service.ts","./src/shared/services/display-monitor/display-monitor-by-indicators.service.ts.pre-build-optimizer.js","./src/shared/services/index.ts"],"names":["this","displayAgentsCallsIndicators","displayAgentsCurrentCallsIndicators","agentsPlannedTotal","agentsConnectedTotal","agentsConnectedByGroup","agentsAuxiliarResume","agentsAssignationResume","fieldList","field_name","name","text","fieldInfo","filter","x","now","day_name","week_day","start_date","start_time","end_time","idealResponseTime","shortTimeDef","agentsReceived","agentsAbandoned","agentsAttended","agentsShort","agentsBeforeTime","agentsAfterTime","agentsHungAgent","agentsServiceLevel","agentsAtentionLevel","agentsAbandonLevel","operation_seconds","operation_time","wait_seconds","wait_time","agentsTmo","agentsAsa","callsActive","callsOnQueue","agentsEffectiveTotal","agentsLoggedTotal","color","value","agentHistoricResume","concept","count_agents","duration_agents","average_agents","id","duration","displayAutomaticCallsIndicators","displayAutomaticCurrentCallsIndicators","automaticReceived","automaticAbandoned","automaticAttended","automaticShort","automaticBeforeTime","automaticAfterTime","automaticHungAgent","automaticServiceLevel","automaticAtentionLevel","automaticAbandonLevel","automaticTmo","automaticAsa","date_now","date_time","queueName","queueNumber","maxWaitTime","maxWaitTimeAnswer","maxWaitTimeAbandon","inboundReceived","inboundAttended","inboundAbandoned","inboundBeforeTime","inboundBeforeMinute","inboundShort","inboundServiceLevel","inboundServiceLevelLastHourBeforeTime","inboundServiceLevelMinute","inboundServiceLevelLastHourBeforeMinute","inboundAttentionLevel","inboundAbandonLevel","activeCalls","agentsLogin","agentsAvailable","agentsBusy","agentsBreak","agentsAssignation","inboundAfterTime","inboundHungAgent","inboundTmo","inboundAsa","displayInboundCallsIndicators","displayInboundCurrentCallsIndicators","http","env","headers","handleError","error","console","getReportList","userSelection","accessToken","localStorage","getItem","post","loopbackApiUrl","pipe","data","DisplayOutboundIndicatorsService","ɵfac","t","ɵprov","token","getDisplayShow","query","JSON","stringify","getReportListHistoric","DisplayInboundIndicatorsService","displayOutboundCallsIndicators","displayOutboundCurrentCallsIndicators","outboundMade","outboundFail","outboundAnswered","outboundEffective","outboundHungout","outboundContactLevel","outboundEffectiveLevel","outboundTMO","throwError","map","catchError","DisplayAgentsIndicatorsService","DisplayAutomaticIndicatorsService","DisplayMonitorByCallsService","DisplayMonitorByAgentsService","DisplayMonitorByIndicatorsService"],"mappings":"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","file":"2.d224e2b94e4c604f906e.js","sourcesContent":["export class DisplayAgentsModel {\n  displayAgentsCallsIndicators;\n  displayAgentsCurrentCallsIndicators;\n  agentsPlannedTotal;\n  agentsConnectedTotal;\n  agentsConnectedByGroup;\n  agentsAuxiliarResume;\n  agentsAssignationResume;\n\n  constructor() {\n    this.displayAgentsCallsIndicators = '';\n    this.displayAgentsCurrentCallsIndicators = '';\n    this.agentsPlannedTotal = '';\n    this.agentsConnectedTotal = '';\n    this.agentsConnectedByGroup = '';\n    this.agentsAuxiliarResume = '';\n    this.agentsAssignationResume = '';\n  }\n\n  public fieldList() {\n    return [\n      { field_name: \"displayAgentsCallsIndicators\", name: \"indicadores_llamadas\", text: \"Indicadores\" },\n      { field_name: \"displayAgentsCurrentCallsIndicators\", name: \"indicadores_llamadas_actuales\", text: \"Llamadas actuales\" },\n      { field_name: \"agentsPlannedTotal\", name: \"agentes_planeados\", text: \"Agentes planeados\" },\n      { field_name: \"agentsConnectedTotal\", name: \"agentes_conectados\", text: \"Agentes conectados\" },\n      { field_name: \"agentsConnectedByGroup\", name: \"agentes_conectados_por_grupo\", text: \"Agentes por grupo\" },\n      { field_name: \"agentsAuxiliarResume\", name: \"resumen_auxiliar\", text: \"Resumen de auxiliares\" },\n      { field_name: \"agentsAssignationResume\", name: \"resumen_asignacion\", text: \"Resumen de asignaciones\" },\n    ];\n  }\n\n  public fieldInfo(field_name) {\n    const register = this.fieldList();\n\n    return register.filter(x => {\n      return x.field_name === field_name;\n    })[0];\n  }\n}\n","export class DisplayAgentsResponseModel {\n  displayAgentsCallsIndicators: [\n    {\n      now;\n      day_name;\n      week_day;\n      start_date;\n      start_time;\n      end_time;\n      idealResponseTime;\n      shortTimeDef;\n      agentsReceived;\n      agentsAbandoned;\n      agentsAttended;\n      agentsShort;\n      agentsBeforeTime;\n      agentsAfterTime;\n      agentsHungAgent;\n      agentsServiceLevel;\n      agentsAtentionLevel;\n      agentsAbandonLevel;\n      operation_seconds;\n      operation_time;\n      wait_seconds;\n      wait_time;\n      agentsTmo;\n      agentsAsa;\n    }\n  ];\n  displayAgentsCurrentCallsIndicators: [\n    {\n      now;\n      callsActive;\n      callsOnQueue;\n    }\n  ];\n  agentsPlannedTotal: [\n    {\n      now;\n      agentsPlannedTotal;\n    }\n  ];\n  agentsConnectedTotal: [\n    {\n      now;\n      agentsConnectedTotal;\n      agentsEffectiveTotal;\n    }\n  ];\n\n  agentsLoggedTotal: [\n    {\n      now;\n      agentsConnectedTotal;\n      agentsEffectiveTotal;\n    }\n  ];\n\n  agentsConnectedByGroup: [\n    {\n      now;\n      name;\n      color;\n      value;\n    }\n  ];\n\n  agentHistoricResume: [\n    {\n      now;\n      concept;\n      count_agents;\n      duration_agents;\n      average_agents;\n    }\n  ];\n\n  agentsAuxiliarResume: [\n    {\n      now;\n      name;\n      id;\n      value;\n      duration;\n    }\n  ];\n  agentsAssignationResume: [\n    {\n      now;\n      name;\n      id;\n      value;\n      duration;\n    }\n  ];\n  scale: any;\n  colors: any;\n\n  constructor() {\n    this.displayAgentsCallsIndicators = [\n      {\n        now: \"\",\n        day_name: \"\",\n        week_day: \"\",\n        start_date: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        idealResponseTime: \"\",\n        shortTimeDef: \"\",\n        agentsReceived: \"\",\n        agentsAbandoned: \"\",\n        agentsAttended: \"\",\n        agentsShort: \"\",\n        agentsBeforeTime: \"\",\n        agentsAfterTime: \"\",\n        agentsHungAgent: \"\",\n        agentsServiceLevel: \"\",\n        agentsAtentionLevel: \"\",\n        agentsAbandonLevel: \"\",\n        operation_seconds: \"\",\n        operation_time: \"\",\n        wait_seconds: \"\",\n        wait_time: \"\",\n        agentsTmo: \"\",\n        agentsAsa: \"\"\n      }\n    ];\n\n    this.displayAgentsCurrentCallsIndicators = [\n      {\n        now: \"\",\n        callsActive: \"\",\n        callsOnQueue: \"\"\n      }\n    ];\n\n    this.agentsPlannedTotal = [\n      {\n        now: \"\",\n        agentsPlannedTotal: \"\"\n      }\n    ];\n\n    this.agentsConnectedTotal = [\n      {\n        now: \"\",\n        agentsConnectedTotal: \"\",\n        agentsEffectiveTotal: \"\"\n      }\n    ];\n\n    this.agentsLoggedTotal = [\n      {\n        now: \"\",\n        agentsConnectedTotal: \"\",\n        agentsEffectiveTotal: \"\"\n      }\n    ];\n\n    this.agentsConnectedByGroup = [\n      {\n        now: \"\",\n        name: \"\",\n        color: \"\",\n        value: null\n      }\n    ];\n\n    this.agentHistoricResume = [\n      {\n        now: \"\",\n        concept: \"\",\n        count_agents: \"\",\n        duration_agents: \"\",\n        average_agents: \"\"\n      }\n    ];\n\n    this.agentsAuxiliarResume = [\n      {\n        now: \"\",\n        name: \"\",\n        id: \"\",\n        value: \"\",\n        duration: \"\"\n      }\n    ];\n\n    this.agentsAssignationResume = [\n      {\n        now: \"\",\n        name: \"\",\n        id: \"\",\n        value: \"\",\n        duration: \"\"\n      }\n    ];\n  }\n}\n","export class DisplayAutomaticModel {\n  displayAutomaticCallsIndicators;\n  displayAutomaticCurrentCallsIndicators;\n  agentsPlannedTotal;\n  agentsConnectedTotal;\n  agentsConnectedByGroup;\n  agentsAuxiliarResume;\n  agentsAssignationResume;\n\n  constructor() {\n    this.displayAutomaticCallsIndicators = '';\n    this.displayAutomaticCurrentCallsIndicators = '';\n    this.agentsPlannedTotal = '';\n    this.agentsConnectedTotal = '';\n    this.agentsConnectedByGroup = '';\n    this.agentsAuxiliarResume = '';\n    this.agentsAssignationResume = '';\n  }\n\n  public fieldList() {\n    return [\n      { field_name: \"displayAutomaticCallsIndicators\", name: \"indicadores_llamadas\", text: \"Indicadores\" },\n      { field_name: \"displayAutomaticCurrentCallsIndicators\", name: \"indicadores_llamadas_actuales\", text: \"Llamadas actuales\" },\n      { field_name: \"agentsPlannedTotal\", name: \"agentes_planeados\", text: \"Agentes planeados\" },\n      { field_name: \"agentsConnectedTotal\", name: \"agentes_conectados\", text: \"Agentes conectados\" },\n      { field_name: \"agentsConnectedByGroup\", name: \"agentes_conectados_por_grupo\", text: \"Agentes por grupo\" },\n      { field_name: \"agentsAuxiliarResume\", name: \"resumen_auxiliar\", text: \"Resumen de auxiliares\" },\n      { field_name: \"agentsAssignationResume\", name: \"resumen_asignacion\", text: \"Resumen de asignaciones\" },\n    ];\n  }\n\n  public fieldInfo(field_name) {\n    const register = this.fieldList();\n\n    return register.filter(x => {\n      return x.field_name === field_name;\n    })[0];\n  }\n}\n","export class DisplayAutomaticResponseModel {\n  displayAutomaticCallsIndicators: [\n    {\n      now;\n      day_name;\n      week_day;\n      start_date;\n      start_time;\n      end_time;\n      idealResponseTime;\n      shortTimeDef;\n      automaticReceived;\n      automaticAbandoned;\n      automaticAttended;\n      automaticShort;\n      automaticBeforeTime;\n      automaticAfterTime;\n      automaticHungAgent;\n      automaticServiceLevel;\n      automaticAtentionLevel;\n      automaticAbandonLevel;\n      operation_seconds;\n      operation_time;\n      wait_seconds;\n      wait_time;\n      automaticTmo;\n      automaticAsa;\n    }\n  ];\n  displayAutomaticCurrentCallsIndicators: [\n    {\n      now;\n      callsActive;\n      callsOnQueue;\n    }\n  ];\n  agentsPlannedTotal: [\n    {\n      now;\n      agentsPlannedTotal;\n    }\n  ];\n  agentsConnectedTotal: [\n    {\n      now;\n      agentsConnectedTotal;\n      agentsEffectiveTotal;\n    }\n  ];\n\n  agentsLoggedTotal: [\n    {\n      now;\n      agentsConnectedTotal;\n      agentsEffectiveTotal;\n    }\n  ];\n\n  agentsConnectedByGroup: [\n    {\n      now;\n      name;\n      color;\n      value;\n    }\n  ];\n\n  agentHistoricResume: [\n    {\n      now;\n      concept;\n      count_agents;\n      duration_agents;\n      average_agents;\n    }\n  ];\n\n  agentsAuxiliarResume: [\n    {\n      now;\n      name;\n      id;\n      value;\n      duration;\n    }\n  ];\n  agentsAssignationResume: [\n    {\n      now;\n      name;\n      id;\n      value;\n      duration;\n    }\n  ];\n  scale: any;\n  colors: any;\n\n  constructor() {\n    this.displayAutomaticCallsIndicators = [\n      {\n        now: \"\",\n        day_name: \"\",\n        week_day: \"\",\n        start_date: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        idealResponseTime: \"\",\n        shortTimeDef: \"\",\n        automaticReceived: \"\",\n        automaticAbandoned: \"\",\n        automaticAttended: \"\",\n        automaticShort: \"\",\n        automaticBeforeTime: \"\",\n        automaticAfterTime: \"\",\n        automaticHungAgent: \"\",\n        automaticServiceLevel: \"\",\n        automaticAtentionLevel: \"\",\n        automaticAbandonLevel: \"\",\n        operation_seconds: \"\",\n        operation_time: \"\",\n        wait_seconds: \"\",\n        wait_time: \"\",\n        automaticTmo: \"\",\n        automaticAsa: \"\"\n      }\n    ];\n\n    this.displayAutomaticCurrentCallsIndicators = [\n      {\n        now: \"\",\n        callsActive: \"\",\n        callsOnQueue: \"\"\n      }\n    ];\n\n    this.agentsPlannedTotal = [\n      {\n        now: \"\",\n        agentsPlannedTotal: \"\"\n      }\n    ];\n\n    this.agentsConnectedTotal = [\n      {\n        now: \"\",\n        agentsConnectedTotal: \"\",\n        agentsEffectiveTotal: \"\"\n      }\n    ];\n\n    this.agentsLoggedTotal = [\n      {\n        now: \"\",\n        agentsConnectedTotal: \"\",\n        agentsEffectiveTotal: \"\"\n      }\n    ];\n\n    this.agentsConnectedByGroup = [\n      {\n        now: \"\",\n        name: \"\",\n        color: \"\",\n        value: null\n      }\n    ];\n\n    this.agentHistoricResume = [\n      {\n        now: \"\",\n        concept: \"\",\n        count_agents: \"\",\n        duration_agents: \"\",\n        average_agents: \"\"\n      }\n    ];\n\n    this.agentsAuxiliarResume = [\n      {\n        now: \"\",\n        name: \"\",\n        id: \"\",\n        value: \"\",\n        duration: \"\"\n      }\n    ];\n\n    this.agentsAssignationResume = [\n      {\n        now: \"\",\n        name: \"\",\n        id: \"\",\n        value: \"\",\n        duration: \"\"\n      }\n    ];\n  }\n}\n","export class DisplayMonitorByCallsModel {\n  date_now: string;\n  date_time: string;\n  idealResponseTime: string;\n  queueName: string;\n  queueNumber: number;\n  maxWaitTime: number;\n  maxWaitTimeAnswer: number;\n  maxWaitTimeAbandon: number;\n  inboundReceived: number;\n  inboundAttended: number;\n  inboundAbandoned: number;\n  inboundBeforeTime: number;\n  inboundBeforeMinute: number;\n  inboundShort: number;\n  inboundServiceLevel: number;\n  inboundServiceLevelLastHourBeforeTime: number;\n  inboundServiceLevelMinute: number;\n  inboundServiceLevelLastHourBeforeMinute: number;\n  inboundAttentionLevel: number;\n  inboundAbandonLevel: number;\n\n  constructor() {\n  this.date_now = '';\n  this.date_time = '';\n  this.idealResponseTime = '';\n  this.queueName = '';\n  this.queueNumber = 0;\n  this.maxWaitTime = 0;\n  this.maxWaitTimeAnswer = 0;\n  this.maxWaitTimeAbandon = 0;\n  this.inboundReceived = 0;\n  this.inboundAttended = 0;\n  this.inboundAbandoned = 0;\n  this.inboundBeforeTime = 0;\n  this.inboundBeforeMinute = 0;\n  this.inboundShort = 0;\n  this.inboundServiceLevel = 0;\n  this.inboundServiceLevelLastHourBeforeTime = 0;\n  this.inboundServiceLevelMinute = 0;\n  this.inboundServiceLevelLastHourBeforeMinute = 0;\n  this.inboundAttentionLevel = 0;\n  this.inboundAbandonLevel = 0;\n  }\n\n  public fieldList() {\n    return [\n      { field_name: \"date_now\", name: \"fecha_actual\", text: \"Fecha actual\" },\n      { field_name: \"date_time\", name: \"tiempo_actual\", text: \"Tiempo actual\" },\n      { field_name: \"queueName\", name: \"nombre_cola\", text: \"Nombre cola\" },\n      { field_name: \"queueNumber\", name: \"numero_cola\", text: \"Número cola\" },\n      { field_name: \"maxWaitTime\", name: \"t_max_actual_espera\", text: \"T. Máx. Actual espera\" },\n      { field_name: \"maxWaitTimeAnswer\", name: \"t_max_actual_contestar\", text: \"T. Máx. Actual contestar (sg)\" },\n      { field_name: \"maxWaitTimeAbandon\", name: \"t_max_actual_abandono\", text: \"T. Máx. Actual abandono (sg)\" },\n      { field_name: \"inboundReceived\", name: \"llamadas_recibidas\", text: \"Llamadas recibidas\" },\n      { field_name: \"inboundAttended\", name: \"llamadas_atendidas\", text: \"Llamadas atendidas\" },\n      { field_name: \"inboundAbandoned\", name: \"llamadas_abandonadas\", text: \"Llamadas abandonadas\" },\n      { field_name: \"inboundBeforeTime\", name: \"atendidas_antes_20\", text: \"Atendidas antes de 20 sg\" },\n      { field_name: \"inboundBeforeMinute\", name: \"atendidas_antes_60\", text: \"Atendidas antes de 60 sg\" },\n      { field_name: \"inboundShort\", name: \"llamadas_cortas\", text: \"Llamadas cortas\" },\n      { field_name: \"inboundServiceLevel\", name: \"nivel_servicio_20\", text: \"Niv. Serv. 20sg\" },\n      { field_name: \"inboundServiceLevelLastHourBeforeTime\", name: \"niv_serv_20_ult_60_min.\", text: \"Niv. Serv. 20sg Ult. 60 Min.\" },\n      { field_name: \"inboundServiceLevelMinute\", name: \"nivel_servicio_60\", text: \"Niv. Serv. 60sg\" },\n      { field_name: \"inboundServiceLevelLastHourBeforeMinute\", name: \"niv_serv_60_ult_60_min\", text: \"Niv. Serv. 60sg Ult. 60 Min.\" },\n      { field_name: \"inboundAttentionLevel\", name: \"nivel_atencion\", text: \"Niv. atención\" },\n      { field_name: \"inboundAbandonLevel\", name: \"nivel_abandono\", text: \"Niv. abandono\" },\n    ];\n  }\n\n  public fieldInfo(field_name) {\n    const register = this.fieldList();\n\n    return register.filter(x => {\n      return x.field_name === field_name;\n    })[0];\n  }\n}\n","export class DisplayMonitorByAgentsModel {\n  queueName: string;\n  activeCalls: number;\n  agentsLogin: number;\n  agentsAvailable: number;\n  agentsBusy: number;\n  agentsBreak: number;\n  agentsAssignation: number;\n\n  constructor() {\n  this.queueName = '';\n  this.activeCalls = 0;\n  this.agentsLogin = 0;\n  this.agentsAvailable = 0;\n  this.agentsBusy = 0;\n  this.agentsBreak = 0;\n  this.agentsAssignation = 0;\n  }\n\n  public fieldList() {\n    return [\n      { field_name: \"queueName\", name: \"nombre_cola\", text: \"Nombre cola\" },\n      { field_name: \"activeCalls\", name: \"llamadas_activas\", text: \"Llamadas activas\" },\n      { field_name: \"agentsLogin\", name: \"agentes_conectados\", text: \"Agentes conectados\" },\n      { field_name: \"agentsAvailable\", name: \"agentes_disponibles\", text: \"Agentes disponibles\" },\n      { field_name: \"agentsBusy\", name: \"agentes_ocupados\", text: \"Agentes ocupados\" },\n      { field_name: \"agentsBreak\", name: \"agentes_auxiliar\", text: \"Agentes en auxiliar\" },\n      { field_name: \"agentsAssignation\", name: \"agentes_asignacion\", text: \"Agentes en asignación\" },\n    ];\n  }\n\n  public fieldInfo(field_name) {\n    const register = this.fieldList();\n\n    return register.filter(x => {\n      return x.field_name === field_name;\n    })[0];\n  }\n}\n","export class DisplayMonitorByIndicatorsModel {\n  queueName: string;\n  day_name: string;\n  week_day: string;\n  start_date: string;\n  start_time: string;\n  end_time: string;\n  idealResponseTime: number;\n  inboundReceived: number;\n  inboundAbandoned: number;\n  inboundAttended: number;\n  inboundShort: number;\n  inboundBeforeTime: number;\n  inboundAfterTime: number;\n  inboundHungAgent: number;\n  inboundServiceLevel: number;\n  inboundAttentionLevel: number;\n  inboundAbandonLevel: number;\n  operation_seconds: number;\n  operation_time: number;\n  wait_seconds: number;\n  wait_time: number;\n  inboundTmo: number;\n  inboundAsa: number;\n\n  constructor() {\n    this.queueName =  '';\n    this.day_name =  '';\n    this.week_day =  '';\n    this.start_date =  '';\n    this.start_time =  '';\n    this.end_time =  '';\n    this.idealResponseTime =  0;\n    this.inboundReceived =  0;\n    this.inboundAbandoned =  0;\n    this.inboundAttended =  0;\n    this.inboundShort =  0;\n    this.inboundBeforeTime =  0;\n    this.inboundAfterTime =  0;\n    this.inboundHungAgent =  0;\n    this.inboundServiceLevel =  0;\n    this.inboundAttentionLevel =  0;\n    this.inboundAbandonLevel =  0;\n    this.operation_seconds =  0;\n    this.operation_time =  0;\n    this.wait_seconds =  0;\n    this.wait_time =  0;\n    this.inboundTmo =  0;\n    this.inboundAsa =  0;\n  }\n\n  public fieldList() {\n    return [\n      { field_name: \"queueName\", name: \"nombre_cola\", text: \"Nombre cola\" },\n      { field_name: \"day_name\", name: \"nombre_dia\", text: \"Día\" },\n      { field_name: \"week_day\", name: \"numero_dia\", text: \"Número día\" },\n      { field_name: \"start_date\", name: \"fecha_inicio\", text: \"Fecha inicio\" },\n      { field_name: \"start_time\", name: \"hora_inicio\", text: \"Hora inicio\" },\n      { field_name: \"end_time\", name: \"fecha_final\", text: \"Fecha final\" },\n      { field_name: \"idealResponseTime\", name: \"tiempo_ideal_respuesta\", text: \"Tiempo ideal de respuesta\" },\n      { field_name: \"inboundReceived\", name: \"llamadas_recibidas\", text: \"Llamadas recibidas\" },\n      { field_name: \"inboundAbandoned\", name: \"llamadas_abandonadas\", text: \"Llamadas abandonadas\" },\n      { field_name: \"inboundAttended\", name: \"llamadas_atendidas\", text: \"Llamadas atendidas\" },\n      { field_name: \"inboundShort\", name: \"llamadas_cortas\", text: \"Llamadas cortas\" },\n      { field_name: \"inboundBeforeTime\", name: \"atendidas_antes_tiempo_ideal\", text: \"Atend. antes del tiempo ideal\" },\n      { field_name: \"inboundAfterTime\", name: \"atendidas_despues_tiempo_ideal\", text: \"Atend. despues del tiempo ideal\" },\n      { field_name: \"inboundHungAgent\", name: \"colgadas_agente\", text: \"Colgadas por agente\" },\n      { field_name: \"inboundServiceLevel\", name: \"nivel_servicio\", text: \"Niv. servicio\" },\n      { field_name: \"inboundAttentionLevel\", name: \"nivel_atencion\", text: \"Niv. atención\" },\n      { field_name: \"inboundAbandonLevel\", name: \"nivel_abandono\", text: \"Niv. abandono\" },\n      { field_name: \"operation_seconds\", name: \"segundos_operacion\", text: \"Segundos operación\" },\n      { field_name: \"operation_time\", name: \"tiempo_operacion\", text: \"Tiempo operación\" },\n      { field_name: \"wait_seconds\", name: \"segundos_espera\", text: \"Segundos espera\" },\n      { field_name: \"wait_time\", name: \"tiempo_espera\", text: \"Tiempo espera\" },\n      { field_name: \"inboundTmo\", name: \"tmo\", text: \"TMO\" },\n      { field_name: \"inboundAsa\", name: \"asa\", text: \"ASA\" },\n    ];\n  }\n\n  public fieldInfo(field_name) {\n    const register = this.fieldList();\n\n    return register.filter(x => {\n      return x.field_name === field_name;\n    })[0];\n  }\n}\n","export * from \"./backendResponse.model\";\nexport * from \"./display-agents/DisplayAgents.model\";\nexport * from \"./display-agents/DisplayAgentsResponse.model\";\nexport * from \"./display-automatic/DisplayAutomatic.model\";\nexport * from \"./display-automatic/DisplayAutomaticResponse.model\";\nexport * from \"./display-inbound/DisplayInbound.model\";\nexport * from \"./display-inbound/DisplayInboundResponse.model\";\nexport * from \"./display-outbound/DisplayOutbound.model\";\nexport * from \"./display-outbound/DisplayOutboundResponse.model\";\nexport * from \"./display-outbound/OutboundIndicators\";\nexport * from \"./display-monitor/DisplayMonitorByCalls.model\";\nexport * from \"./display-monitor/DisplayMonitorByAgents.model\";\nexport * from \"./display-monitor/DisplayMonitorByIndicators.model\";","export class DisplayInboundModel {\n  displayInboundCallsIndicators;\n  displayInboundCurrentCallsIndicators;\n  agentsPlannedTotal;\n  agentsConnectedTotal;\n  agentsConnectedByGroup;\n  agentsAuxiliarResume;\n  agentsAssignationResume;\n\n  constructor() {\n    this.displayInboundCallsIndicators = '';\n    this.displayInboundCurrentCallsIndicators = '';\n    this.agentsPlannedTotal = '';\n    this.agentsConnectedTotal = '';\n    this.agentsConnectedByGroup = '';\n    this.agentsAuxiliarResume = '';\n    this.agentsAssignationResume = '';\n  }\n\n  public fieldList() {\n    return [\n      { field_name: \"displayInboundCallsIndicators\", name: \"indicadores_llamadas\", text: \"Indicadores\" },\n      { field_name: \"displayInboundCurrentCallsIndicators\", name: \"indicadores_llamadas_actuales\", text: \"Llamadas actuales\" },\n      { field_name: \"agentsPlannedTotal\", name: \"agentes_planeados\", text: \"Agentes planeados\" },\n      { field_name: \"agentsConnectedTotal\", name: \"agentes_conectados\", text: \"Agentes conectados\" },\n      { field_name: \"agentsConnectedByGroup\", name: \"agentes_conectados_por_grupo\", text: \"Agentes por grupo\" },\n      { field_name: \"agentsAuxiliarResume\", name: \"resumen_auxiliar\", text: \"Resumen de auxiliares\" },\n      { field_name: \"agentsAssignationResume\", name: \"resumen_asignacion\", text: \"Resumen de asignaciones\" },\n    ];\n  }\n\n  public fieldInfo(field_name) {\n    const register = this.fieldList();\n\n    return register.filter(x => {\n      return x.field_name === field_name;\n    })[0];\n  }\n}\n","//  Angular\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { isNullOrUndefined } from \"util\";\n\nimport { throwError, Observable } from \"rxjs\";\nimport { tap, catchError, map } from \"rxjs/operators\";\n\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport { UserSelectionModel } from \"shared/models\";\n@Injectable({\n  providedIn: \"root\"\n})\nexport class DisplayOutboundIndicatorsService {\n  constructor(private http: HttpClient, private env: EnvService) {}\n\n  headers: HttpHeaders = new HttpHeaders({\n    \"Content-Type\": \"application/json\"\n  });\n\n  private handleError(error: any) {\n    console.error(error);\n    return throwError(error);\n  }\n\n  getReportList(userSelection: UserSelectionModel): Observable<any> {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const url_api = `${this.env.loopbackApiUrl}/api/InvDisplays/displayOutboundIndicators?access_token=${accessToken}`;\n    const res = this.http\n      .post(url_api, userSelection, {\n        headers: this.headers\n      })\n      .pipe(\n        map(data => data),\n        catchError(this.handleError)\n      );\n    return res;\n  }\n}\n","//  Angular\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"shared/services/helpers/env.service\";\nvar DisplayOutboundIndicatorsService = /** @class */ (function () {\n    function DisplayOutboundIndicatorsService(http, env) {\n        this.http = http;\n        this.env = env;\n        this.headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n    }\n    DisplayOutboundIndicatorsService.prototype.handleError = function (error) {\n        console.error(error);\n        return throwError(error);\n    };\n    DisplayOutboundIndicatorsService.prototype.getReportList = function (userSelection) {\n        var accessToken = localStorage.getItem(\"accessToken\");\n        var url_api = this.env.loopbackApiUrl + \"/api/InvDisplays/displayOutboundIndicators?access_token=\" + accessToken;\n        var res = this.http\n            .post(url_api, userSelection, {\n            headers: this.headers\n        })\n            .pipe(map(function (data) { return data; }), catchError(this.handleError));\n        return res;\n    };\n    DisplayOutboundIndicatorsService.ɵfac = function DisplayOutboundIndicatorsService_Factory(t) { return new (t || DisplayOutboundIndicatorsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EnvService)); };\n    DisplayOutboundIndicatorsService.ɵprov = i0.ɵɵdefineInjectable({ token: DisplayOutboundIndicatorsService, factory: DisplayOutboundIndicatorsService.ɵfac, providedIn: \"root\" });\n    return DisplayOutboundIndicatorsService;\n}());\nexport { DisplayOutboundIndicatorsService };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayOutboundIndicatorsService, [{\n        type: Injectable,\n        args: [{\n                providedIn: \"root\"\n            }]\n    }], function () { return [{ type: i1.HttpClient }, { type: i2.EnvService }]; }, null); })();\n","//  Angular\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { isNullOrUndefined } from \"util\";\n\nimport { throwError, Observable } from \"rxjs\";\nimport { tap, catchError, map } from \"rxjs/operators\";\n\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport { UserSelectionModel } from \"shared/models\";\n@Injectable({\n  providedIn: \"root\"\n})\n\nexport class DisplayInboundIndicatorsService {\n  constructor(private http: HttpClient, private env: EnvService) { }\n\n  headers: HttpHeaders = new HttpHeaders({\n    \"Content-Type\": \"application/json\"\n  });\n\n  private handleError(error: any) {\n    console.error(error);\n    return throwError(error);\n  }\n\n  getReportList(userSelection: UserSelectionModel): Observable<any> {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const url_api = `${this.env.loopbackApiUrl}/api/InvDisplays/displayInboundIndicators?access_token=${accessToken}`;\n    const res = this.http\n      .post(url_api, userSelection, {\n        headers: this.headers\n      })\n      .pipe(\n        map(data => data),\n        catchError(this.handleError)\n      );\n    return res;\n  }\n\n  // get Show valid userSelection\n  getDisplayShow(userSelection): Observable<any> {\n    const query = JSON.stringify(userSelection);\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const url_api = `${this.env.loopbackApiUrl}/api/InvDisplays/displayShow?access_token=${accessToken}`;\n    const res = this.http.post(url_api, query, { headers: this.headers });\n    // console.warn('Dashboard......' , url_api, query);\n\n    return res;\n  }\n\n\n  getReportListHistoric(userSelection: UserSelectionModel): Observable<any> {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const url_api = `${this.env.loopbackApiUrl}/api/InvDisplays/displayInboundIndicatorsHistoric?access_token=${accessToken}`;\n    const res = this.http\n      .post(url_api, userSelection, {\n        headers: this.headers\n      })\n      .pipe(\n        map(data => data),\n        catchError(this.handleError)\n      );\n    return res;\n  }\n}\n","//  Angular\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"shared/services/helpers/env.service\";\nvar DisplayInboundIndicatorsService = /** @class */ (function () {\n    function DisplayInboundIndicatorsService(http, env) {\n        this.http = http;\n        this.env = env;\n        this.headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n    }\n    DisplayInboundIndicatorsService.prototype.handleError = function (error) {\n        console.error(error);\n        return throwError(error);\n    };\n    DisplayInboundIndicatorsService.prototype.getReportList = function (userSelection) {\n        var accessToken = localStorage.getItem(\"accessToken\");\n        var url_api = this.env.loopbackApiUrl + \"/api/InvDisplays/displayInboundIndicators?access_token=\" + accessToken;\n        var res = this.http\n            .post(url_api, userSelection, {\n            headers: this.headers\n        })\n            .pipe(map(function (data) { return data; }), catchError(this.handleError));\n        return res;\n    };\n    // get Show valid userSelection\n    DisplayInboundIndicatorsService.prototype.getDisplayShow = function (userSelection) {\n        var query = JSON.stringify(userSelection);\n        var accessToken = localStorage.getItem(\"accessToken\");\n        var url_api = this.env.loopbackApiUrl + \"/api/InvDisplays/displayShow?access_token=\" + accessToken;\n        var res = this.http.post(url_api, query, { headers: this.headers });\n        // console.warn('Dashboard......' , url_api, query);\n        return res;\n    };\n    DisplayInboundIndicatorsService.prototype.getReportListHistoric = function (userSelection) {\n        var accessToken = localStorage.getItem(\"accessToken\");\n        var url_api = this.env.loopbackApiUrl + \"/api/InvDisplays/displayInboundIndicatorsHistoric?access_token=\" + accessToken;\n        var res = this.http\n            .post(url_api, userSelection, {\n            headers: this.headers\n        })\n            .pipe(map(function (data) { return data; }), catchError(this.handleError));\n        return res;\n    };\n    DisplayInboundIndicatorsService.ɵfac = function DisplayInboundIndicatorsService_Factory(t) { return new (t || DisplayInboundIndicatorsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EnvService)); };\n    DisplayInboundIndicatorsService.ɵprov = i0.ɵɵdefineInjectable({ token: DisplayInboundIndicatorsService, factory: DisplayInboundIndicatorsService.ɵfac, providedIn: \"root\" });\n    return DisplayInboundIndicatorsService;\n}());\nexport { DisplayInboundIndicatorsService };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayInboundIndicatorsService, [{\n        type: Injectable,\n        args: [{\n                providedIn: \"root\"\n            }]\n    }], function () { return [{ type: i1.HttpClient }, { type: i2.EnvService }]; }, null); })();\n","export class DisplayOutboundModel {\n  displayOutboundCallsIndicators;\n  displayOutboundCurrentCallsIndicators;\n  agentsPlannedTotal;\n  agentsConnectedTotal;\n  agentsConnectedByGroup;\n  agentsAuxiliarResume;\n  agentsAssignationResume;\n\n  constructor() {\n    this.displayOutboundCallsIndicators = '';\n    this.displayOutboundCurrentCallsIndicators = '';\n    this.agentsPlannedTotal = '';\n    this.agentsConnectedTotal = '';\n    this.agentsConnectedByGroup = '';\n    this.agentsAuxiliarResume = '';\n    this.agentsAssignationResume = '';\n  }\n\n  public fieldList() {\n    return [\n      { field_name: \"displayOutboundCallsIndicators\", name: \"indicadores_llamadas\", text: \"Indicadores\" },\n      { field_name: \"displayOutboundCurrentCallsIndicators\", name: \"indicadores_llamadas_actuales\", text: \"Llamadas actuales\" },\n      { field_name: \"agentsPlannedTotal\", name: \"agentes_planeados\", text: \"Agentes planeados\" },\n      { field_name: \"agentsConnectedTotal\", name: \"agentes_conectados\", text: \"Agentes conectados\" },\n      { field_name: \"agentsConnectedByGroup\", name: \"agentes_conectados_por_grupo\", text: \"Agentes por grupo\" },\n      { field_name: \"agentsAuxiliarResume\", name: \"resumen_auxiliar\", text: \"Resumen de auxiliares\" },\n      { field_name: \"agentsAssignationResume\", name: \"resumen_asignacion\", text: \"Resumen de asignaciones\" },\n    ];\n  }\n\n  public fieldInfo(field_name) {\n    const register = this.fieldList();\n\n    return register.filter(x => {\n      return x.field_name === field_name;\n    })[0];\n  }\n}\n","export class DisplayOutboundResponseModel {\n  displayOutboundCallsIndicators: [\n    {\n      now;\n      day_name;\n      week_day;\n      start_date;\n      start_time;\n      end_time;\n      outboundMade;\n      outboundFail;\n      outboundAnswered;\n      outboundEffective;\n      outboundHungout;\n      outboundContactLevel;\n      outboundEffectiveLevel;\n      operation_seconds;\n      operation_time;\n      outboundTMO;\n    }\n  ];\n  displayOutboundCurrentCallsIndicators: [\n    {\n      now;\n      callsActive;\n      callsOnQueue;\n    }\n  ];\n  agentsPlannedTotal: [\n    {\n      now;\n      agentsPlannedTotal;\n    }\n  ];\n  agentsConnectedTotal: [\n    {\n      now;\n      agentsConnectedTotal;\n      agentsEffectiveTotal;\n    }\n  ];\n\n  agentsLoggedTotal: [\n    {\n      now;\n      agentsConnectedTotal;\n      agentsEffectiveTotal;\n    }\n  ];\n\n  agentsConnectedByGroup: [\n    {\n      now;\n      name;\n      color;\n      value;\n    }\n  ];\n\n  agentHistoricResume: [\n    {\n      now;\n      concept;\n      count_agents;\n      duration_agents;\n      average_agents;\n    }\n  ];\n\n  agentsAuxiliarResume: [\n    {\n      now;\n      name;\n      id;\n      value;\n      duration;\n    }\n  ];\n  agentsAssignationResume: [\n    {\n      now;\n      name;\n      id;\n      value;\n      duration;\n    }\n  ];\n  scale: any;\n  colors: any;\n\n  constructor() {\n    this.displayOutboundCallsIndicators = [\n      {\n        now: \"\",\n        day_name: \"\",\n        week_day: \"\",\n        start_date: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        outboundMade: \"\",\n        outboundFail: \"\",\n        outboundAnswered: \"\",\n        outboundEffective: \"\",\n        outboundHungout: \"\",\n        outboundContactLevel: \"\",\n        outboundEffectiveLevel: \"\",\n        operation_seconds: \"\",\n        operation_time: \"\",\n        outboundTMO: \"\",\n        }\n    ];\n\n    this.displayOutboundCurrentCallsIndicators = [\n      {\n        now: \"\",\n        callsActive: \"\",\n        callsOnQueue: \"\"\n      }\n    ];\n\n    this.agentsPlannedTotal = [\n      {\n        now: \"\",\n        agentsPlannedTotal: \"\"\n      }\n    ];\n\n    this.agentsConnectedTotal = [\n      {\n        now: \"\",\n        agentsConnectedTotal: \"\",\n        agentsEffectiveTotal: \"\"\n      }\n    ];\n\n    this.agentsLoggedTotal = [\n      {\n        now: \"\",\n        agentsConnectedTotal: \"\",\n        agentsEffectiveTotal: \"\"\n      }\n    ];\n\n    this.agentsConnectedByGroup = [\n      {\n        now: \"\",\n        name: \"\",\n        color: \"\",\n        value: null\n      }\n    ];\n\n    this.agentHistoricResume = [\n      {\n        now: \"\",\n        concept: \"\",\n        count_agents: \"\",\n        duration_agents: \"\",\n        average_agents: \"\"\n      }\n    ];\n\n    this.agentsAuxiliarResume = [\n      {\n        now: \"\",\n        name: \"\",\n        id: \"\",\n        value: \"\",\n        duration: \"\"\n      }\n    ];\n\n    this.agentsAssignationResume = [\n      {\n        now: \"\",\n        name: \"\",\n        id: \"\",\n        value: \"\",\n        duration: \"\"\n      }\n    ];\n  }\n}\n","export class DisplayInboundResponseModel {\n  displayInboundCallsIndicators: [\n    {\n      now;\n      day_name;\n      week_day;\n      start_date;\n      start_time;\n      end_time;\n      idealResponseTime;\n      shortTimeDef;\n      inboundReceived;\n      inboundAbandoned;\n      inboundAttended;\n      inboundShort;\n      inboundBeforeTime;\n      inboundAfterTime;\n      inboundHungAgent;\n      inboundServiceLevel;\n      inboundAttentionLevel;\n      inboundAbandonLevel;\n      operation_seconds;\n      operation_time;\n      wait_seconds;\n      wait_time;\n      inboundTmo;\n      inboundAsa;\n    }\n  ];\n  displayInboundCurrentCallsIndicators: [\n    {\n      now;\n      callsActive;\n      callsOnQueue;\n    }\n  ];\n  agentsPlannedTotal: [\n    {\n      now;\n      agentsPlannedTotal;\n    }\n  ];\n  agentsConnectedTotal: [\n    {\n      now;\n      agentsConnectedTotal;\n      agentsEffectiveTotal;\n    }\n  ];\n\n  agentsLoggedTotal: [\n    {\n      now;\n      agentsConnectedTotal;\n      agentsEffectiveTotal;\n    }\n  ];\n\n  agentsConnectedByGroup: [\n    {\n      now;\n      name;\n      color;\n      value;\n    }\n  ];\n\n  agentHistoricResume: [\n    {\n      now;\n      concept;\n      count_agents;\n      duration_agents;\n      average_agents;\n    }\n  ];\n\n  agentsAuxiliarResume: [\n    {\n      now;\n      name;\n      id;\n      value;\n      duration;\n    }\n  ];\n  agentsAssignationResume: [\n    {\n      now;\n      name;\n      id;\n      value;\n      duration;\n    }\n  ];\n  userSelection;\n  scale: any;\n  colors: any;\n\n  constructor() {\n    this.displayInboundCallsIndicators = [\n      {\n        now: \"\",\n        day_name: \"\",\n        week_day: \"\",\n        start_date: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        idealResponseTime: \"\",\n        shortTimeDef: \"\",\n        inboundReceived: \"\",\n        inboundAbandoned: \"\",\n        inboundAttended: \"\",\n        inboundShort: \"\",\n        inboundBeforeTime: \"\",\n        inboundAfterTime: \"\",\n        inboundHungAgent: \"\",\n        inboundServiceLevel: \"\",\n        inboundAttentionLevel: \"\",\n        inboundAbandonLevel: \"\",\n        operation_seconds: \"\",\n        operation_time: \"\",\n        wait_seconds: \"\",\n        wait_time: \"\",\n        inboundTmo: \"\",\n        inboundAsa: \"\"\n      }\n    ];\n\n    this.displayInboundCurrentCallsIndicators = [\n      {\n        now: \"\",\n        callsActive: \"\",\n        callsOnQueue: \"\"\n      }\n    ];\n\n    this.agentsPlannedTotal = [\n      {\n        now: \"\",\n        agentsPlannedTotal: \"\"\n      }\n    ];\n\n    this.agentsConnectedTotal = [\n      {\n        now: \"\",\n        agentsConnectedTotal: \"\",\n        agentsEffectiveTotal: \"\"\n      }\n    ];\n\n    this.agentsLoggedTotal = [\n      {\n        now: \"\",\n        agentsConnectedTotal: \"\",\n        agentsEffectiveTotal: \"\"\n      }\n    ];\n\n    this.agentsConnectedByGroup = [\n      {\n        now: \"\",\n        name: \"\",\n        color: \"\",\n        value: null\n      }\n    ];\n\n    this.agentHistoricResume = [\n      {\n        now: \"\",\n        concept: \"\",\n        count_agents: \"\",\n        duration_agents: \"\",\n        average_agents: \"\"\n      }\n    ];\n\n    this.agentsAuxiliarResume = [\n      {\n        now: \"\",\n        name: \"\",\n        id: \"\",\n        value: \"\",\n        duration: \"\"\n      }\n    ];\n\n    this.agentsAssignationResume = [\n      {\n        now: \"\",\n        name: \"\",\n        id: \"\",\n        value: \"\",\n        duration: \"\"\n      }\n    ];\n  }\n}\n","//  Angular\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { isNullOrUndefined } from \"util\";\n\nimport { throwError, Observable } from \"rxjs\";\nimport { tap, catchError, map } from \"rxjs/operators\";\n\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport { UserSelectionModel } from \"shared/models\";\n@Injectable({\n  providedIn: \"root\"\n})\nexport class DisplayAgentsIndicatorsService {\n  constructor(private http: HttpClient, private env: EnvService) {}\n\n  headers: HttpHeaders = new HttpHeaders({\n    \"Content-Type\": \"application/json\"\n  });\n\n  private handleError(error: any) {\n    console.error(error);\n    return throwError(error);\n  }\n\n  getReportList(userSelection: UserSelectionModel): Observable<any> {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const url_api = `${\n      this.env.loopbackApiUrl\n    }/api/InvDisplays/displayAgentsIndicators?access_token=${accessToken}`;\n    const res = this.http\n      .post(url_api, userSelection, {\n        headers: this.headers\n      })\n      .pipe(\n        map(data => data),\n        catchError(this.handleError)\n      );\n    return res;\n  }\n}\n","//  Angular\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"shared/services/helpers/env.service\";\nvar DisplayAgentsIndicatorsService = /** @class */ (function () {\n    function DisplayAgentsIndicatorsService(http, env) {\n        this.http = http;\n        this.env = env;\n        this.headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n    }\n    DisplayAgentsIndicatorsService.prototype.handleError = function (error) {\n        console.error(error);\n        return throwError(error);\n    };\n    DisplayAgentsIndicatorsService.prototype.getReportList = function (userSelection) {\n        var accessToken = localStorage.getItem(\"accessToken\");\n        var url_api = this.env.loopbackApiUrl + \"/api/InvDisplays/displayAgentsIndicators?access_token=\" + accessToken;\n        var res = this.http\n            .post(url_api, userSelection, {\n            headers: this.headers\n        })\n            .pipe(map(function (data) { return data; }), catchError(this.handleError));\n        return res;\n    };\n    DisplayAgentsIndicatorsService.ɵfac = function DisplayAgentsIndicatorsService_Factory(t) { return new (t || DisplayAgentsIndicatorsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EnvService)); };\n    DisplayAgentsIndicatorsService.ɵprov = i0.ɵɵdefineInjectable({ token: DisplayAgentsIndicatorsService, factory: DisplayAgentsIndicatorsService.ɵfac, providedIn: \"root\" });\n    return DisplayAgentsIndicatorsService;\n}());\nexport { DisplayAgentsIndicatorsService };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayAgentsIndicatorsService, [{\n        type: Injectable,\n        args: [{\n                providedIn: \"root\"\n            }]\n    }], function () { return [{ type: i1.HttpClient }, { type: i2.EnvService }]; }, null); })();\n","//  Angular\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { isNullOrUndefined } from \"util\";\n\nimport { throwError, Observable } from \"rxjs\";\nimport { tap, catchError, map } from \"rxjs/operators\";\n\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport { UserSelectionModel } from \"shared/models\";\n@Injectable({\n  providedIn: \"root\"\n})\nexport class DisplayAutomaticIndicatorsService {\n  constructor(private http: HttpClient, private env: EnvService) {}\n\n  headers: HttpHeaders = new HttpHeaders({\n    \"Content-Type\": \"application/json\"\n  });\n\n  private handleError(error: any) {\n    console.error(error);\n    return throwError(error);\n  }\n\n  getReportList(userSelection: UserSelectionModel): Observable<any> {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const url_api = `${\n      this.env.loopbackApiUrl\n    }/api/InvDisplays/displayAutomaticIndicators?access_token=${accessToken}`;\n    const res = this.http\n      .post(url_api, userSelection, {\n        headers: this.headers\n      })\n      .pipe(\n        map(data => data),\n        catchError(this.handleError)\n      );\n    return res;\n  }\n}\n","//  Angular\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"shared/services/helpers/env.service\";\nvar DisplayAutomaticIndicatorsService = /** @class */ (function () {\n    function DisplayAutomaticIndicatorsService(http, env) {\n        this.http = http;\n        this.env = env;\n        this.headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n    }\n    DisplayAutomaticIndicatorsService.prototype.handleError = function (error) {\n        console.error(error);\n        return throwError(error);\n    };\n    DisplayAutomaticIndicatorsService.prototype.getReportList = function (userSelection) {\n        var accessToken = localStorage.getItem(\"accessToken\");\n        var url_api = this.env.loopbackApiUrl + \"/api/InvDisplays/displayAutomaticIndicators?access_token=\" + accessToken;\n        var res = this.http\n            .post(url_api, userSelection, {\n            headers: this.headers\n        })\n            .pipe(map(function (data) { return data; }), catchError(this.handleError));\n        return res;\n    };\n    DisplayAutomaticIndicatorsService.ɵfac = function DisplayAutomaticIndicatorsService_Factory(t) { return new (t || DisplayAutomaticIndicatorsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EnvService)); };\n    DisplayAutomaticIndicatorsService.ɵprov = i0.ɵɵdefineInjectable({ token: DisplayAutomaticIndicatorsService, factory: DisplayAutomaticIndicatorsService.ɵfac, providedIn: \"root\" });\n    return DisplayAutomaticIndicatorsService;\n}());\nexport { DisplayAutomaticIndicatorsService };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayAutomaticIndicatorsService, [{\n        type: Injectable,\n        args: [{\n                providedIn: \"root\"\n            }]\n    }], function () { return [{ type: i1.HttpClient }, { type: i2.EnvService }]; }, null); })();\n","//  Angular\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { isNullOrUndefined } from \"util\";\n\nimport { throwError, Observable } from \"rxjs\";\nimport { tap, catchError, map } from \"rxjs/operators\";\n\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport { UserSelectionModel } from \"shared/models\";\n@Injectable({\n  providedIn: \"root\"\n})\nexport class DisplayMonitorByCallsService {\n  constructor(private http: HttpClient, private env: EnvService) {}\n\n  headers: HttpHeaders = new HttpHeaders({\n    \"Content-Type\": \"application/json\"\n  });\n\n  private handleError(error: any) {\n    console.error(error);\n    return throwError(error);\n  }\n\n  getReportList(userSelection: UserSelectionModel): Observable<any> {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const url_api = `${this.env.loopbackApiUrl}/api/InvDisplays/displayMonitorByCalls?access_token=${accessToken}`;\n    const res = this.http\n      .post(url_api, userSelection, {\n        headers: this.headers\n      })\n      .pipe(\n        map(data => data),\n        catchError(this.handleError)\n      );\n    return res;\n  }\n}\n","//  Angular\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"shared/services/helpers/env.service\";\nvar DisplayMonitorByCallsService = /** @class */ (function () {\n    function DisplayMonitorByCallsService(http, env) {\n        this.http = http;\n        this.env = env;\n        this.headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n    }\n    DisplayMonitorByCallsService.prototype.handleError = function (error) {\n        console.error(error);\n        return throwError(error);\n    };\n    DisplayMonitorByCallsService.prototype.getReportList = function (userSelection) {\n        var accessToken = localStorage.getItem(\"accessToken\");\n        var url_api = this.env.loopbackApiUrl + \"/api/InvDisplays/displayMonitorByCalls?access_token=\" + accessToken;\n        var res = this.http\n            .post(url_api, userSelection, {\n            headers: this.headers\n        })\n            .pipe(map(function (data) { return data; }), catchError(this.handleError));\n        return res;\n    };\n    DisplayMonitorByCallsService.ɵfac = function DisplayMonitorByCallsService_Factory(t) { return new (t || DisplayMonitorByCallsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EnvService)); };\n    DisplayMonitorByCallsService.ɵprov = i0.ɵɵdefineInjectable({ token: DisplayMonitorByCallsService, factory: DisplayMonitorByCallsService.ɵfac, providedIn: \"root\" });\n    return DisplayMonitorByCallsService;\n}());\nexport { DisplayMonitorByCallsService };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayMonitorByCallsService, [{\n        type: Injectable,\n        args: [{\n                providedIn: \"root\"\n            }]\n    }], function () { return [{ type: i1.HttpClient }, { type: i2.EnvService }]; }, null); })();\n","//  Angular\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { isNullOrUndefined } from \"util\";\n\nimport { throwError, Observable } from \"rxjs\";\nimport { tap, catchError, map } from \"rxjs/operators\";\n\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport { UserSelectionModel } from \"shared/models/\";\n@Injectable({\n  providedIn: \"root\"\n})\nexport class DisplayMonitorByAgentsService {\n  constructor(private http: HttpClient, private env: EnvService) { }\n\n  headers: HttpHeaders = new HttpHeaders({\n    \"Content-Type\": \"application/json\"\n  });\n\n  private handleError(error: any) {\n    console.error(error);\n    return throwError(error);\n  }\n\n  getReportList(userSelection: UserSelectionModel): Observable<any> {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const url_api = `${this.env.loopbackApiUrl}/api/InvDisplays/displayMonitorByAgents?access_token=${accessToken}`;\n    const res = this.http\n      .post(url_api, userSelection, {\n        headers: this.headers\n      })\n      .pipe(\n        map(data => data),\n        catchError(this.handleError)\n      );\n    return res;\n  }\n}\n","//  Angular\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"shared/services/helpers/env.service\";\nvar DisplayMonitorByAgentsService = /** @class */ (function () {\n    function DisplayMonitorByAgentsService(http, env) {\n        this.http = http;\n        this.env = env;\n        this.headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n    }\n    DisplayMonitorByAgentsService.prototype.handleError = function (error) {\n        console.error(error);\n        return throwError(error);\n    };\n    DisplayMonitorByAgentsService.prototype.getReportList = function (userSelection) {\n        var accessToken = localStorage.getItem(\"accessToken\");\n        var url_api = this.env.loopbackApiUrl + \"/api/InvDisplays/displayMonitorByAgents?access_token=\" + accessToken;\n        var res = this.http\n            .post(url_api, userSelection, {\n            headers: this.headers\n        })\n            .pipe(map(function (data) { return data; }), catchError(this.handleError));\n        return res;\n    };\n    DisplayMonitorByAgentsService.ɵfac = function DisplayMonitorByAgentsService_Factory(t) { return new (t || DisplayMonitorByAgentsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EnvService)); };\n    DisplayMonitorByAgentsService.ɵprov = i0.ɵɵdefineInjectable({ token: DisplayMonitorByAgentsService, factory: DisplayMonitorByAgentsService.ɵfac, providedIn: \"root\" });\n    return DisplayMonitorByAgentsService;\n}());\nexport { DisplayMonitorByAgentsService };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayMonitorByAgentsService, [{\n        type: Injectable,\n        args: [{\n                providedIn: \"root\"\n            }]\n    }], function () { return [{ type: i1.HttpClient }, { type: i2.EnvService }]; }, null); })();\n","//  Angular\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { isNullOrUndefined } from \"util\";\n\nimport { throwError, Observable } from \"rxjs\";\nimport { tap, catchError, map } from \"rxjs/operators\";\n\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport { UserSelectionModel } from \"shared/models/\";\n@Injectable({\n  providedIn: \"root\"\n})\nexport class DisplayMonitorByIndicatorsService {\n  constructor(private http: HttpClient, private env: EnvService) { }\n\n  headers: HttpHeaders = new HttpHeaders({\n    \"Content-Type\": \"application/json\"\n  });\n\n  private handleError(error: any) {\n    console.error(error);\n    return throwError(error);\n  }\n\n  getReportList(userSelection: UserSelectionModel): Observable<any> {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const url_api = `${this.env.loopbackApiUrl}/api/InvDisplays/displayMonitorByIndicators?access_token=${accessToken}`;\n    const res = this.http\n      .post(url_api, userSelection, {\n        headers: this.headers\n      })\n      .pipe(\n        map(data => data),\n        catchError(this.handleError)\n      );\n    return res;\n  }\n}\n","//  Angular\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { EnvService } from \"shared/services/helpers/env.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"shared/services/helpers/env.service\";\nvar DisplayMonitorByIndicatorsService = /** @class */ (function () {\n    function DisplayMonitorByIndicatorsService(http, env) {\n        this.http = http;\n        this.env = env;\n        this.headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n    }\n    DisplayMonitorByIndicatorsService.prototype.handleError = function (error) {\n        console.error(error);\n        return throwError(error);\n    };\n    DisplayMonitorByIndicatorsService.prototype.getReportList = function (userSelection) {\n        var accessToken = localStorage.getItem(\"accessToken\");\n        var url_api = this.env.loopbackApiUrl + \"/api/InvDisplays/displayMonitorByIndicators?access_token=\" + accessToken;\n        var res = this.http\n            .post(url_api, userSelection, {\n            headers: this.headers\n        })\n            .pipe(map(function (data) { return data; }), catchError(this.handleError));\n        return res;\n    };\n    DisplayMonitorByIndicatorsService.ɵfac = function DisplayMonitorByIndicatorsService_Factory(t) { return new (t || DisplayMonitorByIndicatorsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EnvService)); };\n    DisplayMonitorByIndicatorsService.ɵprov = i0.ɵɵdefineInjectable({ token: DisplayMonitorByIndicatorsService, factory: DisplayMonitorByIndicatorsService.ɵfac, providedIn: \"root\" });\n    return DisplayMonitorByIndicatorsService;\n}());\nexport { DisplayMonitorByIndicatorsService };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DisplayMonitorByIndicatorsService, [{\n        type: Injectable,\n        args: [{\n                providedIn: \"root\"\n            }]\n    }], function () { return [{ type: i1.HttpClient }, { type: i2.EnvService }]; }, null); })();\n","export * from \"./display-agents/display-agents-indicators.service\";\nexport * from \"./display-automatic/display-automatic-indicators.service\";\nexport * from \"./display-inbound/display-inbound-indicators.service\";\nexport * from \"./display-inbound/display-inbound-interval.service\";\nexport * from \"./display-outbound/display-outbound-indicators.service\";\nexport * from \"./display-monitor/display-monitor-by-calls.service\";\nexport * from \"./display-monitor/display-monitor-by-agents.service\";\nexport * from \"./display-monitor/display-monitor-by-indicators.service\";\n"],"sourceRoot":"webpack:///"}