{"version":3,"sources":["./src/shared/modules/format-pipes/format-pipes.module.ts","./src/shared/modules/format-pipes/format-pipes.module.ts.pre-build-optimizer.js","./src/shared/modules/index.ts","/home/leonardo/01.Maprotel/2020/code/Proser2-Frontend/shared/pipes/shared-pipes.module.ts","/home/leonardo/01.Maprotel/2020/code/Proser2-Frontend/shared/pipes/shared-pipes.module.ts.pre-build-optimizer.js","/home/leonardo/01.Maprotel/2020/code/Proser2-Frontend/shared/pipes/arrayNames.pipe.ts","/home/leonardo/01.Maprotel/2020/code/Proser2-Frontend/shared/pipes/arrayNames.pipe.ts.pre-build-optimizer.js"],"names":["FormatPipesModule","ɵmod","type","ɵinj","factory","t","SharedPipesModule","transform","matrix","result","Array","isArray","map","x","name","ArrayNamesPipe","ɵfac","ɵpipe"],"mappings":"yHAIA,2BCKI,OAFAA,EAAkBC,KAAO,KAAoB,CAAEC,KDEtCF,ICDTA,EAAkBG,KAAO,KAAoB,CAAEC,QAAS,SAAmCC,GAAK,OAAO,IAAKA,GDCnGL,IAAiB,SAHnB,CAAC,QCGDA,EDLX,GEJA,mC,wECAA,kCAWA,+BCII,OAFAM,EAAkBL,KAAO,KAAoB,CAAEC,KDiBtCI,IChBTA,EAAkBH,KAAO,KAAoB,CAAEC,QAAS,SAAmCC,GAAK,OAAO,IAAKA,GDgBnGC,IAAiB,SAlBnB,CAAC,QCGDA,EDJX,I,kCEXA,kDAEA,2BCuBI,ODnBF,YAAAC,UAAA,SAAUC,GACR,IAAIC,EAASD,EAiBb,OAfIE,MAAMC,QAAQH,GAIhBC,EAHWD,EAAOI,KAAI,SAAAC,GACpB,MAAO,IAAMA,EAAEC,SAIK,iBAAXN,IACTC,EAASD,GAGW,iBAAXA,IACTC,EAASD,EAAOM,OAIbL,GCDPM,EAAeC,KAAO,SAAgCX,GAAK,OAAO,IAAKA,GDlB9DU,ICmBTA,EAAeE,MAAQ,KAAgB,CAAEH,KAAM,aAAcZ,KDnBpDa,EAAc,UCoBhBA,EDvBX","file":"common.9adfec247e5f774bcdde.js","sourcesContent":["import { ArrayNamesPipe } from \"sections/crud/src/shared/pipes\";\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n@NgModule({\n  declarations: [ArrayNamesPipe],\n  imports: [CommonModule],\n  exports: [ArrayNamesPipe]\n})\nexport class FormatPipesModule { }\n","import { ArrayNamesPipe } from \"sections/crud/src/shared/pipes\";\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport * as i0 from \"@angular/core\";\nvar FormatPipesModule = /** @class */ (function () {\n    function FormatPipesModule() {\n    }\n    FormatPipesModule.ɵmod = i0.ɵɵdefineNgModule({ type: FormatPipesModule });\n    FormatPipesModule.ɵinj = i0.ɵɵdefineInjector({ factory: function FormatPipesModule_Factory(t) { return new (t || FormatPipesModule)(); }, imports: [[CommonModule]] });\n    return FormatPipesModule;\n}());\nexport { FormatPipesModule };\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(FormatPipesModule, { declarations: [ArrayNamesPipe], imports: [CommonModule], exports: [ArrayNamesPipe] }); })();\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(FormatPipesModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [ArrayNamesPipe],\n                imports: [CommonModule],\n                exports: [ArrayNamesPipe]\n            }]\n    }], null, null); })();\n","export * from \"./format-pipes/format-pipes.module\";\n","import { ShortNamesPipe } from \"./shortNames.pipe\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { SecondsTimePipe } from \"./seconds-time.pipe\";\r\nimport { Sec2ttimePipe } from \"./sec2ttime.pipe\";\r\nimport { WeekDayPipe } from \"./week-day.pipe\";\r\nimport { ThousandPipe } from \"./thousand.pipe\";\r\nimport { ArrayNamesPipe } from \"./arrayNames.pipe\";\r\n\r\nArrayNamesPipe;\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [\r\n    SecondsTimePipe,\r\n    Sec2ttimePipe,\r\n    WeekDayPipe,\r\n    ThousandPipe,\r\n    ShortNamesPipe,\r\n    ArrayNamesPipe\r\n  ],\r\n  exports: [\r\n    SecondsTimePipe,\r\n    Sec2ttimePipe,\r\n    WeekDayPipe,\r\n    ThousandPipe,\r\n    ShortNamesPipe,\r\n    ArrayNamesPipe\r\n  ]\r\n})\r\nexport class SharedPipesModule {}\r\n","import { ShortNamesPipe } from \"./shortNames.pipe\";\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { SecondsTimePipe } from \"./seconds-time.pipe\";\nimport { Sec2ttimePipe } from \"./sec2ttime.pipe\";\nimport { WeekDayPipe } from \"./week-day.pipe\";\nimport { ThousandPipe } from \"./thousand.pipe\";\nimport { ArrayNamesPipe } from \"./arrayNames.pipe\";\nimport * as i0 from \"@angular/core\";\nArrayNamesPipe;\nvar SharedPipesModule = /** @class */ (function () {\n    function SharedPipesModule() {\n    }\n    SharedPipesModule.ɵmod = i0.ɵɵdefineNgModule({ type: SharedPipesModule });\n    SharedPipesModule.ɵinj = i0.ɵɵdefineInjector({ factory: function SharedPipesModule_Factory(t) { return new (t || SharedPipesModule)(); }, imports: [[CommonModule]] });\n    return SharedPipesModule;\n}());\nexport { SharedPipesModule };\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(SharedPipesModule, { declarations: [SecondsTimePipe,\n        Sec2ttimePipe,\n        WeekDayPipe,\n        ThousandPipe,\n        ShortNamesPipe,\n        ArrayNamesPipe], imports: [CommonModule], exports: [SecondsTimePipe,\n        Sec2ttimePipe,\n        WeekDayPipe,\n        ThousandPipe,\n        ShortNamesPipe,\n        ArrayNamesPipe] }); })();\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(SharedPipesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                declarations: [\n                    SecondsTimePipe,\n                    Sec2ttimePipe,\n                    WeekDayPipe,\n                    ThousandPipe,\n                    ShortNamesPipe,\n                    ArrayNamesPipe\n                ],\n                exports: [\n                    SecondsTimePipe,\n                    Sec2ttimePipe,\n                    WeekDayPipe,\n                    ThousandPipe,\n                    ShortNamesPipe,\n                    ArrayNamesPipe\n                ]\n            }]\n    }], null, null); })();\n","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n  name: \"arrayNames\"\n})\nexport class ArrayNamesPipe implements PipeTransform {\n  transform(matrix) {\n    let result = matrix;\n\n    if (Array.isArray(matrix)) {\n      let temp = matrix.map(x => {\n        return \" \" + x.name;\n      });\n      result = temp;\n    } else {\n      if (typeof matrix === \"string\") {\n        result = matrix;\n      }\n\n      if (typeof matrix === \"object\") {\n        result = matrix.name;\n      }\n    }\n\n    return result;\n  }\n}\n","import { Pipe } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nvar ArrayNamesPipe = /** @class */ (function () {\n    function ArrayNamesPipe() {\n    }\n    ArrayNamesPipe.prototype.transform = function (matrix) {\n        var result = matrix;\n        if (Array.isArray(matrix)) {\n            var temp = matrix.map(function (x) {\n                return \" \" + x.name;\n            });\n            result = temp;\n        }\n        else {\n            if (typeof matrix === \"string\") {\n                result = matrix;\n            }\n            if (typeof matrix === \"object\") {\n                result = matrix.name;\n            }\n        }\n        return result;\n    };\n    ArrayNamesPipe.ɵfac = function ArrayNamesPipe_Factory(t) { return new (t || ArrayNamesPipe)(); };\n    ArrayNamesPipe.ɵpipe = i0.ɵɵdefinePipe({ name: \"arrayNames\", type: ArrayNamesPipe, pure: true });\n    return ArrayNamesPipe;\n}());\nexport { ArrayNamesPipe };\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(ArrayNamesPipe, [{\n        type: Pipe,\n        args: [{\n                name: \"arrayNames\"\n            }]\n    }], null, null); })();\n"],"sourceRoot":"webpack:///"}